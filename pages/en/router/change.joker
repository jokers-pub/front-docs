<template>
    <div ref="container" class="joker-demo-container">
        <h2>Route Navigation</h2>
        <p>This section mainly introduces how to perform route navigation and pass route parameters.</p>
        <h3>Native Navigation</h3>
        <p>
            We can use the
            <strong>href</strong>
            attribute of the
            <code>&lt;a&gt;</code>
            tag to achieve direct route navigation. Taking
            <code>Hash</code>
            mode as an example:
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;a href=&quot;#/router/init&quot; target=&quot;_blank&quot;&gt;Normal navigation&lt;/a&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>RouteLocationRaw [Type]</h3>
        <p>
            In addition to native link navigation, we also provide methods like
            <code>push</code>
            and
            <code>replace</code>
            for programmatic navigation. These JavaScript-based navigation methods require passing a
            <code>RouteLocationRaw</code>
            type parameter as the target information for navigation. First, let's clarify the property specifications of this type.
        </p>
        <pre><code class="language-ts">type RouteLocationRaw = string | RouteLocationPathRaw | RouteLocationNameRaw;  
</code></pre>
        <p>
            Next, we'll use the
            <code>push</code>
            method as an example to illustrate the usage of this parameter.
        </p>
        <ol>
            <li>
                <strong>String</strong>
            </li>
        </ol>
        <p>
            We can directly pass a string representing the target address. In
            <code>Hash</code>
            mode, the
            <code>#</code>
            symbol can be omitted.
        </p>
        <pre><code class="language-ts">push(&quot;router/init&quot;);  
</code></pre>
        <ol start="2">
            <li>
                <strong>RouteLocationPathRaw [Path Mode]</strong>
            </li>
        </ol>
        <p>
            Navigation in
            <code>path</code>
            mode supports various functional configurations.
        </p>
        <pre><code class="language-ts">push({  
    path: &quot;router/init&quot;,  
    query: {  
        role: &quot;manager&quot;  
    },  
    refresh: true  
    //...  
});  
</code></pre>
        <p>The complete properties of this type:</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>path</td>
                    <td>Target navigation address</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>replace</td>
                    <td>Whether to skip recording this route in history</td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>force</td>
                    <td>Force navigation, usually used for refreshing the same address</td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>refresh</td>
                    <td>
                        Refresh cache—useful when pages have
                        <code>keepalive</code>
                        enabled
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>state</td>
                    <td>Route state data</td>
                    <td>HistoryState</td>
                </tr>
                <tr>
                    <td>hash</td>
                    <td>
                        Used for
                        <code>HTML History Mode</code>
                        to configure hash parameters
                    </td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>query</td>
                    <td>URL Query parameters</td>
                    <td>object</td>
                </tr>
            </tbody>
        </table>
        <ol start="3">
            <li>
                <strong>RouteLocationNameRaw [Name Mode]</strong>
            </li>
        </ol>
        <p>
            Navigation in
            <code>name</code>
            mode supports various functional configurations. For details about the
            <code>name</code>
            attribute, refer to the
            <a href="/router/registry" target="_blank">Route Registration</a>
            section.
        </p>
        <pre><code class="language-ts">push({  
    name: &quot;userlist&quot;,  
    query: {  
        role: &quot;manager&quot;  
    },  
    refresh: true  
    //...  
});  
</code></pre>
        <p>The complete properties of this type:</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>Target route name (named route)</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>params</td>
                    <td>Route parameters</td>
                    <td>object</td>
                </tr>
                <tr>
                    <td>replace</td>
                    <td>Whether to skip recording this route in history</td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>force</td>
                    <td>Force navigation, usually used for refreshing the same address</td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>refresh</td>
                    <td>
                        Refresh cache—useful when pages have
                        <code>keepalive</code>
                        enabled
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>state</td>
                    <td>Route state data</td>
                    <td>HistoryState</td>
                </tr>
                <tr>
                    <td>hash</td>
                    <td>
                        Used for
                        <code>HTML History Mode</code>
                        to configure hash parameters
                    </td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>query</td>
                    <td>URL Query parameters</td>
                    <td>object</td>
                </tr>
            </tbody>
        </table>
        <blockquote>
            <p>
                Note: Only the
                <code>name</code>
                mode
                <strong>allows</strong>
                passing
                <code>params</code>
                . In
                <code>path</code>
                mode,
                <code>params</code>
                are resolved based on the dynamic parameters in the current
                <strong>path</strong>
                .
            </p>
        </blockquote>
        <h3>push</h3>
        <p>
            Navigates to a specified address. Internally, it uses
            <code>history.pushState</code>
            to efficiently update the URL.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;handleClick&quot;&gt;Normal navigation&lt;/a&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { router } from &quot;@joker.front/router&quot;;

export default class extends Component {
    handleClick() {
        router.push(&quot;/router/init&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>
            The
            <code>push</code>
            method accepts one parameter of type
            <code>RouteLocationRaw</code>
            .
        </p>
        <h3>replace</h3>
        <p>
            Similar to
            <code>push</code>
            , it uses
            <code>history.replaceState</code>
            to update the browser URL. However, it does not create a new history entry; instead, it replaces the current entry. This means that when users click the back button, they won't return to the previous state but will instead go back to the initial state.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;handleClick&quot;&gt;Normal navigation&lt;/a&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { router } from &quot;@joker.front/router&quot;;

export default class extends Component {
    handleClick() {
        router.replace(&quot;/router/init&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>
            The
            <code>replace</code>
            method disregards the current address in history. It accepts one parameter of type
            <code>RouteLocationRaw</code>
            .
        </p>
        <h3>go</h3>
        <p>A navigation method that supports forward and backward jumps.</p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

router.go(1);   // Forward  

router.go(-1);  // Backward  
</code></pre>
        <p>It accepts an integer parameter—positive for forward navigation, negative for backward navigation.</p>
        <h3>back</h3>
        <p>Navigates back to the previous page.</p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

router.back();  
</code></pre>
        <h3>forward</h3>
        <p>Navigates forward, but only if there is forward history available.</p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

router.forward();  
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo3 from "../../../examples/router/change/demo3.joker";
import DEMO_JOKER_demo2 from "../../../examples/router/change/demo2.joker";
import DEMO_JOKER_demo1 from "../../../examples/router/change/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
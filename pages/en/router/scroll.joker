<template>
    <div ref="container" class="joker-demo-container">
        <h2>Scroll Behavior</h2>
        <p>
            Joker Router internally provides a hook for scroll bar interaction after page navigation. We can utilize this parameter to achieve precise control over scrollbar position during page transitions.
        </p>
        <h3>How to Use</h3>
        <p>
            We can configure our scroll behavior through the
            <code>scrollBehavior</code>
            property when initializing the Router. This hook serves as a global routing aspect and triggers after route navigation is completed.
        </p>
        <pre><code class="language-ts">import { Router } from &quot;@joker.front/rourter&quot;;

new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        // Custom scroll operation method after route navigation
    }
});
</code></pre>
        <h3>Parameter Description</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>to</td>
                    <td>Target route location</td>
                    <td>RouteLocation</td>
                </tr>
                <tr>
                    <td>from</td>
                    <td>Source route location</td>
                    <td>RouteLocation</td>
                </tr>
                <tr>
                    <td>savePosition</td>
                    <td>Saved scroll position information of target route (undefined on first visit)</td>
                    <td>ScrollPosition / undefined</td>
                </tr>
            </tbody>
        </table>
        <h3>Return Types</h3>
        <p>
            The
            <code>scrollBehavior</code>
            hook supports multiple return types, each corresponding to different handling logic to ensure expected scroll behavior during page transitions.
        </p>
        <pre><code class="language-ts">export type RouteScrollBehavior = (
    to: RouteLocation,
    from: RouteLocation,
    savedPosition: ScrollPosition | undefined
) =&gt; Awaitable&lt;ScrollPosition | false | void&gt;;
</code></pre>
        <p>This hook supports Promise operations and exhibits different behaviors based on the return value:</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Return Type</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ScrollPosition</td>
                    <td>
                        Returns new scroll values. Joker Router will execute
                        <code>window.scrollTo</code>
                        with these values
                    </td>
                </tr>
                <tr>
                    <td>false</td>
                    <td>No scroll operation needed</td>
                </tr>
                <tr>
                    <td>undefined</td>
                    <td>No scroll operation needed</td>
                </tr>
            </tbody>
        </table>
        <h3>ScrollPosition</h3>
        <p>
            We can return data of type
            <code>ScrollPosition</code>
            to allow Joker Router to control scroll behavior.
        </p>
        <ol>
            <li>
                Return
                <code>top</code>
                /
                <code>left</code>
                to control window scrollbar.
            </li>
        </ol>
        <pre><code class="language-ts">new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        return {
            top: 0,
            left: 0
        };
    }
});
</code></pre>
        <ol start="2">
            <li>
                Set element
                <code>Element</code>
                to scroll to its position.
            </li>
        </ol>
        <pre><code class="language-ts">new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        return {
            el: document.getElementById(&quot;main&quot;)
        };
    }
});
</code></pre>
        <h3>Delayed Scrolling</h3>
        <p>
            In certain scenarios, you may need to wait for a period before page scrolling, such as during transition effects, to ensure scrolling occurs only after the transition completely finishes. To achieve this, you can return a Promise that resolves with the required position descriptor. Here's an example where we wait 500ms before scrolling:
        </p>
        <pre><code class="language-ts">new Router({
    scrollBehavior: async (to, from, savePosition) =&gt; {
        await sleep(500);

        return {
            top: 0
        };
    }
});
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Scroll Behavior</h2>
        <p>
            Joker Router internally provides a scroll-bar interaction hook after page navigation. We can use this parameter to precisely control the position of the scroll bar when switching pages.
        </p>
        <h3>How to Use</h3>
        <p>
            We can configure the scroll-bar behavior through the
            <code>scrollBehavior</code>
            property when initializing the Router. This hook serves as a global route aspect and is triggered after the route navigation is completed.
        </p>
        <pre><code class="language-ts">import { Router } from &quot;@joker.front/router&quot;;

new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        // Custom operation method for the scroll bar after route navigation
    }
});
</code></pre>
        <h3>Parameter Description</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>to</td>
                    <td>The target address</td>
                    <td>RouteLocation</td>
                </tr>
                <tr>
                    <td>from</td>
                    <td>The source address</td>
                    <td>RouteLocation</td>
                </tr>
                <tr>
                    <td>savePosition</td>
                    <td>
                        The saved scroll-bar position information of the target address (this value is
                        <code>undefined</code>
                        for the first time)
                    </td>
                    <td>ScrollPosition / undefined</td>
                </tr>
            </tbody>
        </table>
        <h3>Return Types</h3>
        <p>
            <code>scrollBehavior</code>
            provides multiple return types, and each type corresponds to different processing logics to ensure that the behavior of the scroll bar during page navigation meets expectations.
        </p>
        <pre><code class="language-ts">export type RouteScrollBehavior = (
    to: RouteLocation,
    from: RouteLocation,
    savedPosition: ScrollPosition | undefined
) =&gt; Awaitable&lt;ScrollPosition | false | void&gt;;
</code></pre>
        <p>
            First of all, this hook supports
            <code>Promise</code>
            operations, and different return values lead to different behaviors.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Return Type</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ScrollPosition</td>
                    <td>
                        Returns a new
                        <code>scroll</code>
                        value, and Joker Router will execute
                        <code>window.scrollTo</code>
                        based on the returned value
                    </td>
                </tr>
                <tr>
                    <td>false</td>
                    <td>
                        No
                        <code>scroll</code>
                        operation is required
                    </td>
                </tr>
                <tr>
                    <td>undefined</td>
                    <td>
                        No
                        <code>scroll</code>
                        operation is required
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>ScrollPosition</h3>
        <p>
            We can return data of the
            <code>ScrollPosition</code>
            type to let Joker Router control the scroll-bar behavior.
        </p>
        <ol>
            <li>
                Return
                <code>top</code>
                /
                <code>left</code>
                to control the window scroll bar.
            </li>
        </ol>
        <pre><code class="language-ts">new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        return {
            top: 0,
            left: 0
        };
    }
});
</code></pre>
        <ol start="2">
            <li>
                Set an
                <code>Element</code>
                to scroll to the position of that element.
            </li>
        </ol>
        <pre><code class="language-ts">new Router({
    scrollBehavior: (to, from, savePosition) =&gt; {
        return {
            el: document.getElementById(&quot;main&quot;)
        };
    }
});
</code></pre>
        <h3>Delayed Scrolling</h3>
        <p>
            In some scenarios, you may need to wait for a period of time before scrolling the page, such as during a transition effect, to ensure that the transition is completely finished before scrolling. To achieve this, you can return a Promise that resolves with the required position descriptor. Here is an example where we wait for 500 milliseconds before scrolling:
        </p>
        <pre><code class="language-ts">new Router({
    scrollBehavior: async (to, from, savePosition) =&gt; {
        await sleep(500);

        return {
            top: 0
        };
    }
});
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
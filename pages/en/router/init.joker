<template>
    <div ref="container" class="joker-demo-container">
        <h2>Initializing the Router</h2>
        <p>
            This chapter mainly introduces how to initialize
            <code>Joker Router</code>
            and explains the configurable parameters available during initialization.
        </p>
        <h3>Initialization</h3>
        <p>
            <code>Joker Router</code>
            provides the
            <strong>Router</strong>
            class for router initialization.
        </p>
        <pre><code class="language-ts">import { Router } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHashHistory(),
    base: &quot;&quot;,
    scrollBehavior: (to, from, savePosition) =&gt; {
        // Custom scroll behavior after route navigation
    },
    loggerLeve:&quot;warn&quot;
    routes: [
        { path: &quot;/&quot;, redirect: &quot;/index&quot; },
        { path: &quot;/index&quot;, component: MyPage }
    ]
});
</code></pre>
        <h3>history [History Mode]</h3>
        <p>
            The
            <code>history</code>
            property allows customizing the history mode for routing. Currently, it supports both
            <code>HTML history</code>
            and
            <code>Hash history</code>
            modes, with
            <code>Hash</code>
            mode being the default for managing route history.
        </p>
        <pre><code class="language-ts">import { WebHistory, WebHashHistory } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHashHistory(),

    // Or
    history: new WebHistory()
});
</code></pre>
        <p>
            Detailed information about
            <code>HTML history</code>
            and
            <code>Hash history</code>
            modes can be found in the
            <a href="/router/history" target="_blank">History Mode</a>
            section.
        </p>
        <h3>base [Route Root]</h3>
        <p>
            This property allows adding a root path for all configured routes. By default,
            <code>base</code>
            is empty.
        </p>
        <p>
            For example, when defining a
            <code>/index</code>
            route:
        </p>
        <pre><code class="language-ts">new Router({
    routes: [{ path: &quot;/index&quot;, component: MyPage }]
});
</code></pre>
        <p>
            Without configuring the
            <code>base</code>
            property, this route can be accessed via
            <code>#/index</code>
            .
        </p>
        <pre><code class="language-ts">new Router({
    base:&quot;demo&quot;
    routes: [{ path: &quot;/index&quot;, component: MyPage }]
});
</code></pre>
        <p>
            When the
            <code>base</code>
            property is set to
            <strong>demo</strong>
            , the route becomes accessible via
            <code>#/demo/index</code>
            .
        </p>
        <p>
            The
            <code>base</code>
            configuration applies to all registered routes by prepending the root path.
        </p>
        <h3>scrollBehavior [Scroll Behavior]</h3>
        <p>
            The
            <code>scrollBehavior</code>
            property allows defining custom scroll behavior after route navigation. This method-type property provides access to
            <code>source route</code>
            ,
            <code>target route</code>
            , and
            <code>previously saved scroll position</code>
            .
        </p>
        <p>Custom scroll behavior can be implemented like this:</p>
        <pre><code class="language-ts">new Router({
    scrollBehavior() {
        window.scrollTo(0, 0);
    }
});
</code></pre>
        <p>
            Detailed parameter types and usage can be found in the
            <a href="/router/scroll" target="_blank">Scroll Behavior</a>
            section.
        </p>
        <h3>loggerLeve [Logging Level]</h3>
        <p>
            The
            <code>loggerLeve</code>
            property configures the logging level for Joker Router output.
        </p>
        <pre><code class="language-ts">new Router({
    loggerLeve: &quot;info&quot;
});
</code></pre>
        <p>
            Different levels enable scenarios like
            <code>debugging</code>
            or
            <code>production silent mode</code>
            . The default logging level is
            <code>warn</code>
            , where only warnings and errors are output.
        </p>
        <p>The level hierarchy is as follows:</p>
        <p>
            <code>silent &lt; error &lt; warn &lt; info</code>
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Value</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>silent</td>
                    <td>Silent mode - no log output</td>
                </tr>
                <tr>
                    <td>error</td>
                    <td>Only error logs</td>
                </tr>
                <tr>
                    <td>warn</td>
                    <td>Error and warning logs</td>
                </tr>
                <tr>
                    <td>info</td>
                    <td>Full logs - typically used for internal Joker Router debugging</td>
                </tr>
            </tbody>
        </table>
        <h3>routes [Route Registration Configuration]</h3>
        <p>
            The
            <code>routes</code>
            property is arguably the most important when working with Joker Router, as it registers all known (static) route information for your project.
        </p>
        <p>This property also provides clear visibility of all route paths and configurations in the project.</p>
        <pre><code class="language-ts">new Router({
    routes: [
        { path: &quot;/&quot;, redirect: &quot;/index&quot; },
        { path: &quot;/index&quot;, component: MyPage }
    ]
});
</code></pre>
        <p>
            The
            <code>routes</code>
            configuration offers extensive flexibility. You can learn more in the
            <a href="/router/registry" target="_blank">Route Registration</a>
            section.
        </p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Parameter Passing</h2>
        <p>
            During route navigation, there are multiple ways to pass parameters. This section mainly introduces these parameter-passing methods and their usage scenarios.
        </p>
        <h3>URL Parameter Passing</h3>
        <p>
            The types of parameter passing vary depending on the
            <strong>History Mode</strong>
            used. They include the following methods:
        </p>
        <ul>
            <li>
                <strong>URL Query</strong>
                : For example,
                <code>example.html?param=1&amp;name=zohar</code>
                .
            </li>
            <li>
                <strong>Path Variable Matching</strong>
                : Based on the
                <strong>path</strong>
                variable configuration, parameters are parsed at runtime and stored in the current route information.
            </li>
            <li>
                <strong>Router Props</strong>
                : Parameters can be configured when registering a route and passed to the page component instance when the route loads.
            </li>
            <li>
                <strong>Navigation Parameter Passing (Name Mode)</strong>
                : When navigating using methods like
                <strong>push</strong>
                or
                <strong>replace</strong>
                , parameters can be passed via
                <code>params</code>
                in name-based navigation mode.
            </li>
        </ul>
        <blockquote>
            <p>
                Note: In
                <strong>HTML History</strong>
                mode, since route matching no longer relies on
                <strong>hash</strong>
                , the
                <code>Hash</code>
                method can also be used to pass parameters.
            </p>
        </blockquote>
        <p>Next, we will introduce the usage and scenarios of these parameter-passing methods in detail.</p>
        <h3>URL Query</h3>
        <p>
            The
            <strong>URL Query</strong>
            mode allows parameters to be defined using
            <code>?</code>
            . However, this method may cause page refreshes. It is typically used in multi-page applications or scenarios like shareable pages.
        </p>
        <h4>Passing Parameters</h4>
        <p>Using a link:</p>
        <pre><code class="language-html">&lt;a href=&quot;/index.html?user=zohar&amp;age=30&quot;&gt;DEMO&lt;/a&gt;  
</code></pre>
        <p>Using method-based navigation:</p>
        <pre><code class="language-ts">push({  
    path: &quot;user/info&quot;,  
    query: {  
        user: &quot;zohar&quot;,  
        age: 30  
    }  
});  
</code></pre>
        <h4>Retrieving Parameters</h4>
        <p>
            Parameters can be retrieved using the
            <code>window.location.search</code>
            property in JavaScript. Alternatively, they can be obtained via
            <code>router.route.value.query</code>
            . Further details about
            <code>router.route</code>
            are covered in the
            <a href="/router/route" target="_blank">Route Information</a>
            section.
        </p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

// Get query parameters  
router.route.value.query;  
</code></pre>
        <h3>Path Variable Matching [path]</h3>
        <p>
            Before understanding path variable matching, please review the
            <code>path</code>
            attribute rules in
            <a href="/router/registry" target="_blank">Route Registration</a>
            . This section focuses on how to use
            <strong>path</strong>
            rules to pass parameters.
        </p>
        <h4>Passing Parameters</h4>
        <p>
            Example of a dynamic parameterized
            <code>path</code>
            :
        </p>
        <pre><code class="language-ts">new Router({  
    routes: [  
        {  
            path: &quot;/user/:userName/:userAge&quot;  
        }  
    ]  
});  
</code></pre>
        <h4>Retrieving Parameters</h4>
        <p>
            When accessing the route
            <code>#/user/zohar/30</code>
            , parameters can be retrieved via
            <code>router.route.value.params</code>
            . More details about
            <code>router.route</code>
            are covered in the
            <a href="/router/route" target="_blank">Route Information</a>
            section.
        </p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

// Get route parameters  
router.route.value.params;  

/**  
 * ====&gt; Output:  
 * {  
 *     userName: 'zohar',  
 *     userAge: '30'  
 * }  
 */  
</code></pre>
        <p>
            Note: Since parameters are parsed from the URL (a string), all parameter types will be
            <code>string</code>
            .
        </p>
        <h3>Router Props [Component Parameter Passing]</h3>
        <p>
            The
            <strong>Router Props</strong>
            method differs from others as it passes parameters as
            <code>props</code>
            to the target component.
        </p>
        <h4>Passing Parameters</h4>
        <pre><code class="language-ts">new Router({  
    routes: [  
        {  
            path: &quot;/user/info&quot;,  
            component: userComponent,  
            props: {  
                userName: &quot;zohar&quot;,  
                userAge: 30  
            }  
        }  
    ]  
});  
</code></pre>
        <h4>Retrieving Parameters</h4>
        <p>
            Parameters can be retrieved via props in the rendered component
            <strong>userComponent</strong>
            .
        </p>
        <pre><code class="language-html">&lt;template&gt;  
    &lt;ul&gt;  
        &lt;li&gt;Name: @props.userName&lt;/li&gt;  
        &lt;li&gt;Age: @props.userAge&lt;/li&gt;  
    &lt;/ul&gt;  
&lt;/template&gt;  

&lt;script&gt;  
    import { Component } from &quot;@joker.front/core&quot;;  

    export class extends Component&lt;{ userName: string, userAge: number }&gt; {  
        //...  
    }  
&lt;/script&gt;  
</code></pre>
        <blockquote>
            <p>
                This method does not expose parameters in the
                <strong>URL</strong>
                , allowing them to be used as internal logic parameters. For example, when two routes point to the same view component,
                <code>props</code>
                can provide different parameters to the same component for distinct logic handling.
            </p>
        </blockquote>
        <h3>Navigation Parameter Passing (Name Mode)</h3>
        <p>
            This method uses the
            <strong>name</strong>
            mode of the router to pass parameters, working similarly to dynamic
            <strong>path</strong>
            parameters.
        </p>
        <h4>Passing Parameters</h4>
        <pre><code class="language-ts">new Router({  
    routes: [  
        {  
            name: &quot;userInfo&quot;,  
            path: &quot;/user/:userName/:userAge&quot;,  
            //...  
        }  
    ]  
});  
</code></pre>
        <p>
            When navigating using
            <code>push</code>
            :
        </p>
        <pre><code class="language-ts">push({  
    name: &quot;userInfo&quot;,  
    params: {  
        userName: &quot;zohar&quot;,  
        userAge: 30  
    }  
});  
</code></pre>
        <h4>Retrieving Parameters</h4>
        <p>
            When accessing
            <code>#/user/zohar/30</code>
            , parameters can be retrieved via
            <code>router.route.value.params</code>
            . More details about
            <code>router.route</code>
            are covered in the
            <a href="/router/route" target="_blank">Route Information</a>
            section.
        </p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

// Get route parameters  
router.route.value.params;  

/**  
 * ====&gt; Output:  
 * {  
 *     userName: 'zohar',  
 *     userAge: '30'  
 * }  
 */  
</code></pre>
        <p>
            <strong>Important Note:</strong>
        </p>
        <ul>
            <li>
                If a route has dynamic parameters in its
                <code>path</code>
                and a
                <code>name</code>
                property, Joker Router attempts to
                <strong>reverse-translate</strong>
                the passed parameters into a
                <code>string</code>
                based on the
                <code>path</code>
                configuration, updating the browser URL accordingly.
            </li>
            <li>If parameters do not match or no dynamic parameters exist, navigation uses the converted path.</li>
        </ul>
        <p>Example:</p>
        <pre><code class="language-ts">new Router({  
    routes: [  
        {  
            name: &quot;userInfo&quot;,  
            path: &quot;/user/:userName/:userAge?&quot;,  
            //...  
        },  
        {  
            name: &quot;userInfo2&quot;,  
            path: &quot;/user&quot;,  
            //...  
        }  
    ]  
});  

push({  
    name: &quot;userInfo&quot;,  
    params: {  
        userName: &quot;zohar&quot;,  
        userAge: 30  
    }  
});  
// URL becomes ==&gt; #/user/zohar/30  

push({  
    name: &quot;userInfo&quot;,  
    params: {  
        userName: &quot;zohar&quot;  
    }  
});  
// URL becomes ==&gt; #/user/zohar  

push({  
    name: &quot;userInfo2&quot;,  
    params: {  
        userName: &quot;zohar&quot;,  
        userAge: 30  
    }  
});  
// URL remains ==&gt; #/user (parameters passed implicitly)  
</code></pre>
        <h3>Meta [Route Metadata]</h3>
        <p>
            Static values can be configured in a route's
            <code>meta</code>
            property.
        </p>
        <h4>Passing Parameters</h4>
        <pre><code class="language-ts">new Router({  
    routes: [  
        {  
            path: &quot;/user/userList&quot;,  
            meta: {  
                env: &quot;dev&quot;  
            }  
        }  
    ]  
});  
</code></pre>
        <h4>Retrieving Parameters</h4>
        <p>
            Parameters can be retrieved via
            <code>router.route.value.meta</code>
            . More details about
            <code>router.route</code>
            are covered in the
            <a href="/router/route" target="_blank">Route Information</a>
            section.
        </p>
        <pre><code class="language-ts">import { router } from &quot;@joker.front/router&quot;;  

// Get meta parameters  
router.route.value.meta;  

/**  
 * ====&gt; Output:  
 * {  
 *     env: 'dev'  
 * }  
 */  
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
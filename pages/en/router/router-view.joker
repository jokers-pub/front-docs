<template>
    <div ref="container" class="joker-demo-container">
        <h2>router-view View Container</h2>
        <p>
            This chapter introduces the core component in Joker Router:
            <code>&lt;router-view&gt;</code>
            , which serves as the view container providing the rendering space for page components.
        </p>
        <h3>What is a View Container</h3>
        <p>
            We can split a page into multiple dynamically rendered blocks and use the
            <code>&lt;router-view&gt;</code>
            view container to dynamically render the components for each block.
        </p>
        <p>
            A page can consist of different sections, such as:
            <code>header</code>
            ,
            <code>menu</code>
            ,
            <code>content area</code>
            , etc. Each section can be a partial page that updates its component as needed when routing changes.
        </p>
        <p>
            <img src="/router/layout.png" alt="Layout" />
        </p>
        <h3>How to Use</h3>
        <p>
            We can add a
            <code>&lt;router-view&gt;</code>
            in a page to create a dynamic view container, and manage the rendered components of the view container via the Router's
            <a href="/router/registry" target="_blank">configuration</a>
            .
        </p>
        <pre><code class="language-html">&lt;div&gt;  
    &lt;router-view&gt;&lt;/router-view&gt;  
&lt;/div&gt;  
</code></pre>
        <h3>Named View Containers</h3>
        <p>
            A page can have multiple view containers. To specify which component should be rendered in which container, we use the
            <code>name</code>
            attribute to associate the view container with its corresponding component.
        </p>
        <pre><code class="language-html">&lt;div&gt;  
    &lt;div class=&quot;top&quot;&gt;  
        &lt;router-view name=&quot;top&quot;&gt;&lt;/router-view&gt;  
    &lt;/div&gt;  
    &lt;div class=&quot;content&quot;&gt;  
        &lt;router-view name=&quot;content&quot;&gt;&lt;/router-view&gt;  
    &lt;/div&gt;  
    &lt;div class=&quot;bottom&quot;&gt;  
        &lt;router-view name=&quot;bottom&quot;&gt;&lt;/router-view&gt;  
    &lt;/div&gt;  
&lt;/div&gt;  
</code></pre>
        <p>
            Named view containers typically work in conjunction with the
            <code>components</code>
            field in the route configuration. When multiple view components are defined in the routing settings, these components can be rendered in their respective view containers based on route matching.
        </p>
        <h3>Events [updated]</h3>
        <p>
            The view container provides an
            <code>updated</code>
            event, which is triggered after the view component has finished loading and is mounted into the view container.
        </p>
        <pre><code class="language-html">&lt;template&gt;  
    &lt;router-view @updated=&quot;handleUpdated&quot;&gt;&lt;/router-view&gt;  
&lt;/template&gt;  

&lt;script&gt;  
    import {Component} from &quot;@joker.front/core&quot;;  
    import {RouterViewUpdatedEventData} from &quot;@joker.front/router&quot;;  

    export class extends Component{  
        handleUpdated(e:VNode.Event&lt;RouterViewUpdatedEventData&gt;){  
            //TODO: e.data  
        }  
    }  
&lt;/script&gt;  
</code></pre>
        <p>
            Here,
            <code>RouterViewUpdatedEventData</code>
            serves as the parameter type for the
            <strong>updated</strong>
            event, which includes:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>deep</td>
                    <td>
                        The current view container hierarchy (see
                        <a href="/router/nested-routes" target="_blank">Nested Routes</a>
                        )
                    </td>
                    <td>number</td>
                </tr>
                <tr>
                    <td>isLeaf</td>
                    <td>
                        Whether it's a leaf container (see
                        <a href="/router/nested-routes" target="_blank">Nested Routes</a>
                        )
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>keepAlive</td>
                    <td>Whether to maintain state</td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>component</td>
                    <td>The currently mounted component instance</td>
                    <td>
                        <a href="/base/component-property" target="_blank">Component</a>
                    </td>
                </tr>
                <tr>
                    <td>currentRoute</td>
                    <td>Current route information</td>
                    <td>RouteLocation</td>
                </tr>
                <tr>
                    <td>routeRecord</td>
                    <td>Matched route record</td>
                    <td>RouteRecord</td>
                </tr>
            </tbody>
        </table>
        <h3>Slot Rendering</h3>
        <p>
            <code>&lt;router-view&gt;</code>
            as a component also supports slot content passing.
        </p>
        <pre><code class="language-html">&lt;template&gt;  
    &lt;router-view&gt;  
        &lt;p&gt;I am the slot template to be rendered&lt;/p&gt;  
    &lt;/router-view&gt;  
&lt;/template&gt;  
</code></pre>
        <p>
            The example above shows that the
            <a href="/base/template-section" target="_blank">section</a>
            inside
            <code>router-view</code>
            will be passed to the mounted component, which then handles the corresponding rendering logic.
        </p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
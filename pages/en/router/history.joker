<template>
    <div ref="container" class="joker-demo-container">
        <h2>History Modes</h2>
        <p>
            Joker Router currently provides two history modes:
            <code>HTML History</code>
            and
            <code>HASH</code>
            .
        </p>
        <p>This chapter introduces the differences between these two modes and how to customize the history mode.</p>
        <h3>WebHashHistory [HASH]</h3>
        <p>
            The
            <code>WebHashHistory</code>
            mode is one of the most widely used routing methods in frontend applications. It handles route navigation by adding a hash symbol (#) to the URL, thereby avoiding additional server overhead since these hash-based URLs are not sent to the server. However, this mode has a negative impact on search engine optimization (SEO), as search engines typically do not crawl or index URLs with hash symbols.
        </p>
        <pre><code class="language-ts">import { Router, WebHashHistory } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHashHistory()
});
</code></pre>
        <h3>WebHistory [HTML5 Mode]</h3>
        <p>
            The
            <code>WebHashHistory</code>
            mode allows URLs to appear more like traditional static page URLs, such as
            <code>https://example.com/user/id</code>
            , which provides a significant advantage in terms of user experience. However, this also presents a challenge: since our application is a client-side single-page application, if the server is not properly configured, users accessing
            <code>https://example.com/user/id</code>
            directly via the browser might encounter a 404 error, which is not what we want.
            Luckily, resolving this issue is straightforward. You need to set up a simple redirect route on the server to ensure that any URL that doesn't match a static resource is redirected to your application's
            <code>index.html</code>
            page. This way, no matter how users access the application, they will see a consistent page display, which is crucial for improving user experience and avoiding awkward 404 errors.
        </p>
        <p>
            If SEO is a high priority, consider using the HTML5
            <code>history.pushState</code>
            API to manage routes. This approach does not leave hash symbols in the URL, which helps improve the page's discoverability in search engines.
        </p>
        <pre><code class="language-ts">import { Router, WebHistory } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHistory()
});
</code></pre>
        <blockquote>
            <p>This mode requires corresponding configuration on the frontend deployment server.</p>
        </blockquote>
        <h3>How to Customize the History Mode</h3>
        <p>
            We provide the
            <code>IRouteHistory</code>
            interface type. You only need to implement all properties and methods of this interface to create a custom history mode.
        </p>
        <pre><code class="language-ts">export interface IRouteHistory {
    readonly base: string;

    readonly location: string;

    readonly state: HistoryState;

    push(to: string, data?: HistoryState): void;

    replace(to: string, data?: HistoryState): void;

    go(delta: number, triggerListeners?: boolean): void;

    listen(callBack: NavigationCallBack): () =&gt; void;

    createHref(location: string): string;

    destroy(): void;
}
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>History Modes</h2>
        <p>
            Joker Router currently offers two history modes:
            <code>HTML History</code>
            and
            <code>HASH</code>
            .
        </p>
        <p>
            This chapter mainly introduces the differences between these two modes and how to customize the history mode.
        </p>
        <h3>WebHashHistory [HASH]</h3>
        <p>
            The
            <code>WebHashHistory</code>
            mode is one of the most widely used routing methods in front-end applications. It handles route navigation by appending a hash symbol (#) to the URL, which avoids additional burden on the server because URLs with hash symbols are not sent to the server. However, this mode has a certain negative impact on search engine optimization (SEO) because search engines usually do not crawl and index URLs with hash symbols.
        </p>
        <pre><code class="language-ts">import { Router, WebHashHistory } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHashHistory()
});
</code></pre>
        <h3>WebHistory [HTML5 Mode]</h3>
        <p>
            The
            <code>WebHashHistory</code>
            mode allows URLs to look more like those of traditional static pages, such as
            <code>https://example.com/user/id</code>
            , which is a significant advantage in terms of user experience. However, it also poses a challenge: since our application is a single-page client-side application, if the server is not configured correctly, users directly accessing
            <code>https://example.com/user/id</code>
            through the browser may encounter a 404 error, which is obviously not what we want.
            Fortunately, solving this problem is not complicated. You need to set up a simple redirection route on the server to ensure that any URL that does not match a static resource will be redirected to the
            <code>index.html</code>
            page of your application. In this way, no matter how users access the application, they will get a consistent page display, which is crucial for improving the user experience and avoiding embarrassing 404 errors.
        </p>
        <p>
            If you have high requirements for SEO, you can consider using the
            <code>history.pushState</code>
            API of HTML5 to manage routes. This method does not leave a hash symbol in the URL, which helps improve the page's discoverability in search engines.
        </p>
        <pre><code class="language-ts">import { Router, WebHistory } from &quot;@joker.front/rourter&quot;;

new Router({
    history: new WebHistory()
});
</code></pre>
        <blockquote>
            <p>This mode requires corresponding configuration on the front-end deployment service.</p>
        </blockquote>
        <h3>How to Customize the History Mode</h3>
        <p>
            We provide the
            <code>IRouteHistory</code>
            interface type. You only need to implement all the properties and methods of this interface to create a custom history mode.
        </p>
        <pre><code class="language-ts">export interface IRouteHistory {
    readonly base: string;

    readonly location: string;

    readonly state: HistoryState;

    push(to: string, data?: HistoryState): void;

    replace(to: string, data?: HistoryState): void;

    go(delta: number, triggerListeners?: boolean): void;

    listen(callBack: NavigationCallBack): () =&gt; void;

    createHref(location: string): string;

    destroy(): void;
}
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Data Proxy</h2>
        <p>This chapter focuses on how to proxy data.</p>
        <h3>Declaring Reactive State</h3>
        <p>
            We can use the
            <code>observer</code>
            and
            <code>ShallowObserver</code>
            methods provided by Core in any script file to intercept and proxy an object.
        </p>
        <p>
            We can specify the properties to be proxied in the
            <code>model</code>
            attribute of a
            <a href="/base/component" target="_blank">Component</a>
            . These properties will be proxied via the
            <code>observer</code>
            function before the component loads, enabling operations to be executed when property values change.
        </p>
        <pre><code class="language-ts">import { observer } from &quot;@joker.front/core&quot;;  

let obj = observer({ userName: &quot;Zhang San&quot; });  

let arr = observer([1, 2, 3, 4]);  
</code></pre>
        <blockquote>
            <p>
                Typically, this function is used in conjunction with
                <a href="/base/watcher" target="_blank">Data Subscription</a>
                . If the object is not intended to be subscribed, it is not recommended to perform data proxying to avoid unnecessary performance overhead.
            </p>
        </blockquote>
        <h3>Observer Deep Proxy Interception</h3>
        <p>
            <code>observer</code>
            is a widely-used generic data proxy function that performs real-time proxying on all deeply nested properties of an object. Additionally, it can automatically intercept and proxy newly added properties, ensuring that data changes are promptly monitored and processed.
        </p>
        <p>This method provides two parameter configurations:</p>
        <ul>
            <li>
                The
                <strong>object</strong>
                to be proxied, which must be of an object type.
            </li>
            <li>
                Whether to
                <code>clone</code>
                (optional, defaults to
                <code>false</code>
                ). Setting this to
                <code>true</code>
                clones a new object for proxying without modifying the original data.
            </li>
        </ul>
        <p>The object to be proxied must meet the following type requirements:</p>
        <ul>
            <li>A plain object or array</li>
            <li>
                Extensible (
                <code>Object.isExtensible</code>
                )
            </li>
            <li>
                Not frozen (
                <code>Object.isFrozen</code>
                )
            </li>
        </ul>
        <p>
            When proxying a complex object while excluding certain properties, freezing methods can be used to prevent unwanted interception.
        </p>
        <p>Alternatively, you can add a specific property to an object that requires proxying:</p>
        <pre><code class="language-ts">defineObserverProperty(obj, &quot;keyName&quot;, {  
    userName: &quot;Zhang San&quot;  
});  
</code></pre>
        <p>
            The
            <code>defineObserverProperty</code>
            method allows configuring a property on an object and proxying its value.
        </p>
        <h3>ShallowObserver Shallow Proxy Interception</h3>
        <p>
            <code>ShallowObserver</code>
            is a data proxy mechanism that, unlike
            <code>observer</code>
            , can intercept values of any data type. However, it differs in that
            <code>ShallowObserver</code>
            does not proxy deeply nested properties of objects or arraysâ€”it only performs interception on the directly provided value.
        </p>
        <pre><code class="language-ts">import { ShallowObserver } from &quot;@joker.front/core&quot;;  

let obj = new ShallowObserver({ userName: &quot;Zhang San&quot; });  
// obj.value  =&gt; Zhang San  

let arr = new ShallowObserver([1, 2, 3, 4]);  
// obj.value  =&gt; [1, 2, 3, 4]  

let age = new ShallowObserver(12);  
// obj.value  =&gt; 12  

let message = new ShallowObserver(&quot;I am a notification&quot;);  
// obj.value  =&gt; I am a notification  
</code></pre>
        <p>
            Using
            <code>ShallowObserver</code>
            , we obtain a proxied object whose
            <code>value</code>
            property can be accessed to retrieve the current proxied value. Retrieving the value triggers
            <strong>subscription</strong>
            , and updates notify subscribers.
        </p>
        <p>
            Moreover, the
            <code>isChanged</code>
            property can be used to determine whether the value has been modified:
        </p>
        <pre><code class="language-ts">let message = new ShallowObserver(&quot;I am a notification&quot;);  
// obj.isChanged  =&gt; false  

// Update the value  
message.value = &quot;I am a new notification&quot;;  
// obj.isChanged  =&gt; true  
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
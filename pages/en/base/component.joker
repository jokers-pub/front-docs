<template>
    <div ref="container" class="joker-demo-container">
        <h2>Joker Component Overview</h2>
        <p>
            Components are the primary building blocks of Joker applications. Each component consists of the following parts:
        </p>
        <ul>
            <li>An HTML template that declares what to render on the page</li>
            <li>A TypeScript class that defines the behavior</li>
            <li>CSS styles to be applied to the template</li>
        </ul>
        <p>This topic describes how to create and configure Joker components.</p>
        <p>
            First, we need to establish a core concept:
            <strong>everything is a component</strong>
            . Whether it's a page or a functional module, everything exists as a component - the only difference is the mounting timing.
        </p>
        <h3>Creating a Component</h3>
        <p>
            Create a file with the
            <code>.joker</code>
            extension. This file represents a Single File Component (SFC).
        </p>
        <p>A component is composed of three parts:</p>
        <ol>
            <li>
                <code>&lt;template&gt;</code>
                template
            </li>
            <li>
                <code>&lt;script&gt;</code>
                logic script
            </li>
            <li>
                <code>&lt;style&gt;</code>
                component styles
            </li>
        </ol>
        <p>Let's introduce these three parts separately.</p>
        <h3>Template</h3>
        <p>
            Inside the
            <code>.joker</code>
            file, create a template tag (it must be a top-level tag) to define the rendering template. See the example below:
        </p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;I am content&lt;/div&gt;
&lt;/template&gt;
</code></pre>
        <p>
            In templates,
            <code>
                @("@")
            </code>
            represents dynamic directives. Joker provides a rich set of dynamic directives. You can learn more through the tutorial
            <a href="/base/template" target="_blank">here</a>
            .
        </p>
        <h3>Script Logic</h3>
        <p>
            Inside the
            <code>.joker</code>
            file, create a script tag (it must be a top-level tag) to define the component logic. See the example below:
        </p>
        <pre><code class="language-html">&lt;script&gt;
    import { Component } from &quot;@joker.front/core&quot;;
    export default class extends Component {
        // Here lies our component logic  
    }
&lt;/script&gt;
</code></pre>
        <h3>Component Styles</h3>
        <p>
            Inside the
            <code>.joker</code>
            file, create a style tag (it must be a top-level tag) to define the component styles. See the example below:
        </p>
        <pre><code class="language-html">&lt;style&gt;
    .div {
        color: #666;
    }
&lt;/style&gt;
</code></pre>
        <p>
            Using the
            <strong>JOKER FRONT TOOLS</strong>
            extension in VSCode, you can quickly generate basic component code snippets. This extension provides template hints by default to help you write Joker components more efficiently.
        </p>
        <p>
            <img src="/base/vscode-template.png" alt="vscode-template" />
        </p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
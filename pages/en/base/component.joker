<template>
    <div ref="container" class="joker-demo-container">
        <h2>Overview of Joker Components</h2>
        <p>
            Components are the main building blocks of Joker applications. Each component consists of the following parts:
        </p>
        <ul>
            <li>An HTML template for declaring the content to be rendered on the page.</li>
            <li>A TypeScript class for defining behavior.</li>
            <li>CSS styles to be applied to the template.</li>
        </ul>
        <p>This topic describes how to create and configure Joker components.</p>
        <p>
            First, we need to clarify a concept that everything is a component. Whether it is a page or a functional component, it exists as a component, only the loading timing of the components is different.
        </p>
        <h3>Creating a Component</h3>
        <p>
            Create a file with the suffix
            <code>.joker</code>
            . This file is a Single-File Component (SFC) of a component.
        </p>
        <p>A component is composed of three parts:</p>
        <ol>
            <li>
                <code>&lt;template&gt;</code>
                template
            </li>
            <li>
                <code>&lt;script&gt;</code>
                logic script
            </li>
            <li>
                <code>&lt;style&gt;</code>
                component style
            </li>
        </ol>
        <p>Let's introduce these three parts separately.</p>
        <h3>template Template</h3>
        <p>
            Create a
            <code>template</code>
            tag within the
            <code>.joker</code>
            file (the
            <code>template</code>
            needs to be a top-level tag), which means the content within this tag is our render template. Please see the following example:
        </p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;I'm the content&lt;/div&gt;
&lt;/template&gt;
</code></pre>
        <p>
            In the template,
            <code>
                @("@")
            </code>
            represents a dynamic directive. Joker provides a rich set of dynamic directives. You can learn about them through the subsequent tutorial
            <a href="/base/template" target="_blank">here</a>
            .
        </p>
        <h3>script Logic Script</h3>
        <p>
            Create a
            <code>script</code>
            tag within the
            <code>.joker</code>
            file (the
            <code>script</code>
            needs to be a top-level tag), which means the content within this tag is our logic script. Please see the following example:
        </p>
        <pre><code class="language-html">&lt;script&gt;
    import { Component } from &quot;@joker.front/core&quot;;
    export default class extends Component {
        // The content here is our component logic
    }
&lt;/script&gt;
</code></pre>
        <h3>style Component Style</h3>
        <p>
            Create a
            <code>style</code>
            tag within the
            <code>.joker</code>
            file (the
            <code>style</code>
            needs to be a top-level tag), which means the content within this tag is our component style. Please see the following example:
        </p>
        <pre><code class="language-html">&lt;style&gt;
    .div {
        color: #666;
    }
&lt;/style&gt;
</code></pre>
        <p>
            Through the
            <code>JOKER FRONT TOOLS</code>
            extension in VSCODE, you can quickly create basic component code. This extension provides default quick template hints to help you write Joker components more efficiently.
        </p>
        <p>
            <img src="/base/vscode-template.png" alt="vscode-template" />
        </p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>VNode-Virtual Node</h2>
        <p>
            This chapter mainly introduces the virtual node, which is of great importance in Core and is frequently used in our actual logical development.
        </p>
        <blockquote>
            <p>
                Before reading this chapter, please first understand the relevant content of
                <a href="/base/ast" target="_blank">AST</a>
                and
                <a href="/base/render" target="_blank">Rendering</a>
                .
            </p>
        </blockquote>
        <h3>Overview</h3>
        <p>
            The virtual node is compiled from the Abstract Syntax Tree (AST). It integrates the current component object, carries the association relationship between components, and has the function of node data storage. It not only maps the syntax structure of the component but also realizes data encapsulation and management, providing efficient and flexible data support for the operation of the entire system.
        </p>
        <p>
            <img src="/base/render.png" alt="VNode" />
        </p>
        <p>
            It is different from AST.
            <code>AST.Node[]</code>
            represents the structured data of the template in the development state, while
            <code>VNode.Node</code>
            represents the structured data to be actually rendered.
        </p>
        <p>
            For example, for a
            <strong>for</strong>
            loop:
        </p>
        <pre><code class="language-xml">@for(let item in 10){
    @item
}
</code></pre>
        <p>
            At the AST level, the above code only contains two nodes: a
            <code>for loop</code>
            directive and one of its subsets. This is because the AST is only an abstract syntax to be compiled, not the actual rendering result.
            When the above code is rendered on the page, it will be compiled into:
        </p>
        <pre><code>├── for loop
│   ├── Text node 1
│   ├──...
│   └── Text node 10
</code></pre>
        <p>
            It should be noted that
            <code>VNode.Node[]</code>
            is a full-fledged structured data. Whether the node is to be rendered or not, it will exist in the virtual structure tree in the form of a node.
            <strong>
                The virtual node data is generated by the Core kernel, and it is not recommended to modify it.
            </strong>
        </p>
        <p>
            <code>VNode.Node</code>
            serves as the basic type of the virtual node, and it has derived many virtual nodes with functional significance, including
            <code>VNode.Text</code>
            ,
            <code>VNode.Element</code>
            , etc.
        </p>
        <p>
            As the basic type,
            <code>VNode.Node</code>
            itself has the following properties:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter Name</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>static</td>
                    <td>
                        Whether it is a static node, used to distinguish dynamic directives and components, facilitating quick update and rendering
                    </td>
                    <td>boolean</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>output</td>
                    <td>
                        Output, corresponding to
                        <a href="/base/render" target="_blank">Render</a>
                        rendering. The output is different for different platforms. In HTML, the output is
                        <code>DOM Node</code>
                    </td>
                    <td>object</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>parent</td>
                    <td>Parent node</td>
                    <td>VNode.Node/undefined</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>sleep</td>
                    <td>Whether the current node is in a sleeping state</td>
                    <td>boolean</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>prev</td>
                    <td>The previous node</td>
                    <td>VNode.Node/undefined</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>next</td>
                    <td>The next node</td>
                    <td>VNode.Node/undefined</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <p>
            In addition to the preset properties, each node also provides a series of API methods for developers to use.
        </p>
        <h4>closest</h4>
        <p>
            This function can be used to search upward from the current node to find the nearest parent element that meets the requirements.
        </p>
        <pre><code class="language-ts">node.closest&lt;VNode.Element&gt;((node) =&gt; {
    return node instanceof VNode.Element;
}, true);
</code></pre>
        <ul>
            <li>
                The first parameter is the query logic method. During the search, the parent nodes will be passed to this function for judgment level by level. When
                <strong>true</strong>
                is returned, it indicates that the node is the target node.
            </li>
            <li>
                The second parameter (breakWhenVRoot) is used to limit the search range. When the root node is encountered, the search will not continue upward, and the default value is
                <strong>false</strong>
                .
            </li>
        </ul>
        <h4>find</h4>
        <p>
            Through this method, you can find the subset elements that meet the conditions. This method returns all the matching subsets (
            <code>VNode.Node[]</code>
            ).
        </p>
        <pre><code class="language-ts">node.find((node) =&gt; {
    return node instanceof VNode.Element;
});
</code></pre>
        <h4>contains</h4>
        <p>
            Through this method, you can judge whether the current component contains the specified node. This method returns
            <strong>boolean</strong>
            .
        </p>
        <pre><code class="language-ts">node.contains((node) =&gt; {
    return node instanceof VNode.Element;
});
</code></pre>
        <blockquote>
            <p>
                <code>VNode.Node</code>
                is an entity class created by initialization (new) during rendering. We can use
                <code>instanceof</code>
                to determine the type of the node.
            </p>
        </blockquote>
        <h3>VNode.Root</h3>
        <p>
            <code>VNode.Root</code>
            represents the root node of a component. It is the top-level parent node of all nodes in this component. The first node of each component must be an instance of the
            <code>VNode.Root</code>
            type.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                </tr>
                <tr>
                    <td>component</td>
                    <td>Component instance</td>
                    <td>IComponent</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Text</h3>
        <p>
            <code>VNode.Text</code>
            represents a text node.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>text</td>
                    <td>Text content</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Html</h3>
        <p>
            As an HTML node, the content block of
            <code>VNode.Html</code>
            will be rendered using HTML.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>html</td>
                    <td>HTML content</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Comment</h3>
        <p>
            <code>VNode.Comment</code>
            is a comment node. During rendering, the comment content will be output.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>text</td>
                    <td>Comment content</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Element</h3>
        <p>
            <code>VNode.Element</code>
            is a general-purpose tag node. Non-Component components will be output as
            <code>VNode.Element</code>
            nodes.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>attributes</td>
                    <td>Tag attributes</td>
                    <td>Record&lt;string, any&gt;</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>Node events</td>
                    <td>
                        Array&lt;[string,{modifiers?: string[]; callBack: EventCallBack}]&gt;
                        <code>EventCallBack</code>
                        See the
                        <strong>VNode.Event</strong>
                        section for details
                    </td>
                </tr>
                <tr>
                    <td>tagName</td>
                    <td>Tag name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Component</h3>
        <p>
            <code>VNode.Component</code>
            is a component node, used to provide component data processing and a loading container for the component.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>Component name</td>
                    <td>string/undefined (may be a dynamic component)</td>
                </tr>
                <tr>
                    <td>component</td>
                    <td>Component instance object</td>
                    <td>Component</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>Component events</td>
                    <td>
                        Array&lt;[string,{modifiers?: string[]; callBack: EventCallBack}]&gt;
                        <code>EventCallBack</code>
                        See the
                        <strong>VNode.Event</strong>
                        section for details
                    </td>
                </tr>
                <tr>
                    <td>propValues</td>
                    <td>Component parameters</td>
                    <td>Record&lt;string, any&gt;</td>
                </tr>
                <tr>
                    <td>keepalive</td>
                    <td>
                        Whether the component requires state retention, corresponding to the
                        <strong>keep-alve</strong>
                        property in
                        <a href="/base/template-property" target="_blank">Template Built-in Attributes</a>
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>firstElement</td>
                    <td>
                        The first
                        <code>VNode.Element</code>
                        node within the component
                    </td>
                    <td>VNode.Element/undefined</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                </tr>
            </tbody>
        </table>
        <p>We usually use this type to achieve complex requirements during component development. For example:</p>
        <pre><code class="language-ts">class extends Component{
    get parentComponent(){
        this.$rootVNode.closest((n)=&gt;{
            return n instanceof VNode.Component &amp;&amp; n.component.name='my-component-id';
        })?.component;
    }

    test(){
        // Call the parent component API
        this.parentComponent?.testFunction();
    }
}
</code></pre>
        <blockquote>
            <p>
                The
                <strong>output</strong>
                property of
                <code>VNode.Component</code>
                outputs different contents on different Render platforms. For example, in HTML-Render, this node is rendered as:
                <code>document.createTextNode(&quot;&quot;)</code>
                , an empty character node used to record the node position.
            </p>
        </blockquote>
        <h3>VNode.Condition</h3>
        <p>
            <code>VNode.Condition</code>
            represents a conditional node, which is used to implement the
            <code>if</code>
            /
            <code>elseif</code>
            /
            <code>else</code>
            directives in the template.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>Directive category</td>
                    <td>
                        <code>if</code>
                        /
                        <code>elseif</code>
                        /
                        <code>else</code>
                    </td>
                </tr>
                <tr>
                    <td>result</td>
                    <td>
                        The calculation result of the node condition (not valid. To avoid invalid calculations, when there are multi-level conditional judgments such as
                        <strong>if-else</strong>
                        , if the previous condition is true, the subsequent conditions will not be actively refreshed until the previous judgment is false)
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>isShow</td>
                    <td>
                        Whether the subset is rendered. This value can represent the real
                        <strong>rendering result</strong>
                        , not the
                        <strong>calculation result</strong>
                    </td>
                    <td>boolean</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.List / VNode.ListItem</h3>
        <p>
            <code>VNode.List</code>
            is a list-rendering node, used to process list loop data and provide a rendering container for list items.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.ListItem</td>
                </tr>
            </tbody>
        </table>
        <p>
            <code>VNode.ListItem</code>
            is a list
            <strong>item</strong>
            -rendering node, used to provide a rendering container for content nodes.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ob</td>
                    <td>
                        The rendering data object of the current item, including the
                        <code>indexKey</code>
                        and
                        <code>itemKey</code>
                        configured by the loop directive
                    </td>
                    <td>Component</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Sub-nodes</td>
                    <td>VNode.Node[]</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.RenderSection</h3>
        <p>
            <code>VNode.RenderSection</code>
            is a block-rendering node, used to render the
            <strong>template to be rendered</strong>
            in the current component.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>id</td>
                    <td>Block name</td>
                    <td>string (default: unknown)</td>
                </tr>
                <tr>
                    <td>params</td>
                    <td>Block parameters</td>
                    <td>any[]</td>
                </tr>
                <tr>
                    <td>section</td>
                    <td>Block rendering object</td>
                    <td>SectionType</td>
                </tr>
            </tbody>
        </table>
        <p>
            The
            <code>SectionType</code>
            type includes:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>asts</td>
                    <td>
                        AST tree. You can refer to
                        <a href="/base/ast" target="_blank">AST</a>
                        for understanding
                    </td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>ob</td>
                    <td>The data object (ob) required when rendering this template</td>
                    <td>Object</td>
                </tr>
                <tr>
                    <td>parser</td>
                    <td>The parser object where this template is rendered</td>
                    <td>ParserTemplate</td>
                </tr>
                <tr>
                    <td>params</td>
                    <td>
                        Parameters. You can refer to the block parameter section in
                        <a href="/base/template-section" target="_blank">Block Rendering</a>
                        . This property
                        <strong>does not represent the parameter value</strong>
                        but
                        <strong>the parameter name</strong>
                    </td>
                    <td>string[]</td>
                </tr>
            </tbody>
        </table>
        <h3>VNode.Event</h3>
        <p>
            <code>VNode.Event</code>
            is the event-handling object in the Joker front-end. Whether it is an event actively responded to by JS or a native event trigger, this type will be passed as the first parameter to the event-handling function.
        </p>
        <p>
            The object has a
            <code>data</code>
            property representing the parameter passed by the event. The value type can be specified through generics for convenient subsequent operations, and the default value is undefined.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property Name</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>eventName</td>
                    <td>Event name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>event</td>
                    <td>Native event object, depending on the running platform</td>
                    <td>any</td>
                </tr>
                <tr>
                    <td>target</td>
                    <td>The virtual node that responds to the event</td>
                    <td>VNode.Node/undefined</td>
                </tr>
                <tr>
                    <td>data</td>
                    <td>Event parameter</td>
                    <td>&lt;T&gt;:any</td>
                </tr>
                <tr>
                    <td>preventDefault</td>
                    <td>Prevent the default event</td>
                    <td>function</td>
                </tr>
                <tr>
                    <td>stopPropagation</td>
                    <td>Prevent event propagation</td>
                    <td>function</td>
                </tr>
            </tbody>
        </table>
        <p>
            Regarding the type of the event-handling function (
            <code>EventCallBack</code>
            ), the
            <strong>
                first parameter of all event-handling functions must be
                <code>VNode.Event</code>
            </strong>
            .
        </p>
        <pre><code class="language-ts">export type EventCallBack&lt;T = any&gt; = (e: VNode.Event&lt;T&gt;) =&gt; void;
</code></pre>
        <blockquote>
            <p>
                For event handling, you can learn by referring to
                <code>$on</code>
                in
                <a href="/base/component-api" target="_blank">Component API</a>
                and
                <a href="/base/template-event" target="_blank">Template Component Registration</a>
                .
            </p>
        </blockquote>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
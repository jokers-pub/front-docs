<template>
    <div ref="container" class="joker-demo-container">
        <h2>Conditional Rendering</h2>
        <p>
            This chapter mainly introduces how to implement logical branching in the
            <code>template</code>
            .
        </p>
        <h3>if</h3>
        <p>
            Use
            <code>
                @("@if(condition)"){...}
            </code>
            in templates to implement logical branches. It is used to conditionally render a block of content. The content block will only be rendered when the directive's expression evaluates to a truthy value. The
            <code>if(condition)</code>
            condition can be a value, expression, property, or method call.
        </p>
        <pre><code class="language-xml">@if(value){
    &lt;p&gt;I am a paragraph&lt;/p&gt;
}
</code></pre>
        <p>
            As seen in the code example above, the syntax is the same as using if in JavaScript, except that Joker's
            <code>if / else if / else</code>
            directives must use
            <code>
                {}
            </code>
            to wrap your content. The curly braces
            <strong>cannot be omitted</strong>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;button @click=&quot;handleClick&quot;&gt;Toggle the rendering state&lt;/button&gt;
    &lt;/DemoRow&gt;
    @if(model.isShow) {
        &lt;p&gt;I'm a paragraph.&lt;/p&gt;
    }
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        isShow: false
    };
    handleClick() {
        this.model.isShow = !this.model.isShow;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>else if</h3>
        <p>
            <code>else if</code>
            cannot exist independently. It must be used together with the
            <code>if</code>
            directive. When using
            <code>else if</code>
            , there is no need to prefix it with
            <code>@</code>
            . The start of
            <code>if</code>
            already indicates the beginning of a directive, and
            <code>else if</code>
            is just a syntax for logical branching.
        </p>
        <p>
            <strong>else if</strong>
            and
            <strong>if</strong>
            must be adjacent siblings; they cannot be separated by hierarchy or cross-level association.
        </p>
        <pre><code class="language-xml">@if(value===1){
    &lt;p&gt;I am paragraph one&lt;/p&gt;
}
else if(value===2){
    &lt;p&gt;I am paragraph two&lt;/p&gt;
}
else if(value===3){
    &lt;p&gt;I am paragraph three&lt;/p&gt;
}
...
</code></pre>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;button @click=&quot;handleClick&quot;&gt;Toggle the value ( value=@model.value )&lt;/button&gt;
    &lt;/DemoRow&gt;
    @if(model.value === 1) {
        &lt;p&gt;I'm paragraph one.&lt;/p&gt;
    }
    else if(model.value === 2) {
        &lt;p&gt;I'm paragraph two.&lt;/p&gt;
    }
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        value: 1
    };
    handleClick() {
        if (this.model.value === 3) {
            this.model.value = 1;
        } else {
            this.model.value++;
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                It is worth noting that the evaluation order is top-down. If a preceding condition evaluates to true, even if a later else if condition is also true, it will not be rendered (but the condition will still executeâ€”see below).
            </p>
        </blockquote>
        <p>
            It is important to understand that
            <strong>if</strong>
            and
            <strong>else if</strong>
            in
            <code>template</code>
            do not execute top-down in the same way as traditional coding runtime mechanisms. Although we internally implement a top-down conditional execution mechanism to control rendering, the conditions in
            <strong>if</strong>
            and
            <strong>else if</strong>
            will run and attempt to resolve results every time. Therefore,
            <strong>constraints should be independent rather than interrelated</strong>
            . The purpose is to enable
            <code>local condition updates for ultimate responsive performance experience</code>
            . Let's look at an example for clarity:
        </p>
        <pre><code class="language-xml">@if(array===undefined){
    &lt;p&gt;I am paragraph one&lt;/p&gt;
}
else if(array.length===0){
    &lt;p&gt;I am paragraph two&lt;/p&gt;
}
else {
    &lt;p&gt;I am paragraph three&lt;/p&gt;
}
</code></pre>
        <p>
            In the example above, if
            <code>array</code>
            is undefined, the evaluation condition in
            <code>else if</code>
            will throw an error because it cannot read the
            <code>length</code>
            property. Thus, the correct way to write it is:
        </p>
        <pre><code class="language-xml">@if(array===undefined){
    &lt;p&gt;I am paragraph one&lt;/p&gt;
}
else if(array &amp;&amp; array.length===0){
    &lt;p&gt;I am paragraph two&lt;/p&gt;
}
else {
    &lt;p&gt;I am paragraph three&lt;/p&gt;
}
</code></pre>
        <h3>else</h3>
        <p>
            The
            <code>else</code>
            keyword can pair with
            <code>if</code>
            or other
            <code>else if</code>
            statements in an
            <code>if-else</code>
            chain. When the
            <code>if</code>
            condition is not satisfied, the program continues executing the code block after
            <code>else</code>
            . In an
            <code>if-else</code>
            chain, only the last
            <code>else</code>
            (if there are no
            <code>else if</code>
            statements) can exist independently. Other
            <code>else</code>
            statements must pair with
            <code>if</code>
            or
            <code>else if</code>
            .
        </p>
        <pre><code class="language-xml">@if(value===1){
    &lt;p&gt;I am paragraph one&lt;/p&gt;
}
else if(value===2){
    &lt;p&gt;I am paragraph two&lt;/p&gt;
}
else {
    &lt;p&gt;I am paragraph three&lt;/p&gt;
}
</code></pre>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;button @click=&quot;handleClick&quot;&gt;Toggle the value ( value=@model.value )&lt;/button&gt;
    &lt;/DemoRow&gt;
    @if(model.value === 1) {
        &lt;p&gt;I'm paragraph one.&lt;/p&gt;
    }
    else if(model.value === 2) {
        &lt;p&gt;I'm paragraph two.&lt;/p&gt;
    }
    else {
        &lt;p&gt;I'm paragraph three.&lt;/p&gt;
    }
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        value: 1
    };
    handleClick() {
        if (this.model.value === 3) {
            this.model.value = 1;
        } else {
            this.model.value++;
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Deep Dive into the Mechanism</h3>
        <p>
            During conditional rendering, only the first matching logic block will be rendered. Otherwise, the
            <code>else</code>
            block will be rendered (if there is one) or nothing will be rendered (if there is no else). When dynamically configuring a component's display state, its appearance and disappearance actually involve
            <strong>creation</strong>
            and
            <strong>destruction</strong>
            operations of the component.
        </p>
        <p>The following example demonstrates how logic blocks work in practice:</p>
        <p>
            <strong>Subcomponent Code:</strong>
        </p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;p&gt;I am a child component @props.name&lt;/p&gt;
&lt;/template&gt;
&lt;script&gt;
    import { Component } from &quot;@joker.front/core&quot;;
    import { Message } from &quot;@joker.front/ui&quot;;

    export default class extends Component&lt;{
        name: string
    }&gt; {
        mounted() {
            Message({
                message: `${this.props.name} is initialized and mounted`,
                type: &quot;success&quot;
            });
        }
        beforeDestroy() {
            Message({
                message: `${this.props.name} is destroyed`,
                type: &quot;warning&quot;
            });
        }
    }
&lt;/script&gt;
</code></pre>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;button @click=&quot;handleClick&quot;&gt;Toggle the value ( value=@model.value )&lt;/button&gt;
    &lt;/DemoRow&gt;
    @if(model.value === 1) {
        &lt;MyComponent name=&quot;One&quot; /&gt;
    }
    else if(model.value === 2) {
        &lt;MyComponent name=&quot;Two&quot; /&gt;
    }
    else {
        &lt;MyComponent name=&quot;Three&quot; /&gt;
    }
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import MyComponent from &quot;./children.joker&quot;;
export default class extends Component {
    model = {
        value: 1
    };
    components = {
        MyComponent
    };
    handleClick() {
        if (this.model.value === 3) {
            this.model.value = 1;
        } else {
            this.model.value++;
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>
            Of course, you can also use
            <code>keep-alive</code>
            in if conditions to maintain state during switching when needed.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;button @click=&quot;handleClick&quot;&gt;Toggle the value&lt;/button&gt;
    &lt;/DemoRow&gt;
    @if(model.isShow) {
        &lt;MyComponent keep-alive /&gt;
    }
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import MyComponent from &quot;./children-keep.joker&quot;;
export default class extends Component {
    model = {
        isShow: true
    };
    components = {
        MyComponent
    };
    handleClick() {
        this.model.isShow = !this.model.isShow;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../../examples/base/template-if/demo5.joker";
import DEMO_JOKER_demo4 from "../../../examples/base/template-if/demo4.joker";
import DEMO_JOKER_demo3 from "../../../examples/base/template-if/demo3.joker";
import DEMO_JOKER_demo2 from "../../../examples/base/template-if/demo2.joker";
import DEMO_JOKER_demo1 from "../../../examples/base/template-if/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
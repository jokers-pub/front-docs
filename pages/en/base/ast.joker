<template>
    <div ref="container" class="joker-demo-container">
        <h2>AST Syntax Tree</h2>
        <p>This chapter introduces the Abstract Syntax Tree (AST) in Joker's template.</p>
        <h3>Overview</h3>
        <p>
            AST is the structured data representation of templates in Joker, which will eventually combine with component instances to render virtual Nodes and display them on the target platform.
        </p>
        <p>There are two sources of AST:</p>
        <ol>
            <li>
                Written in the
                <code>&lt;template&gt;</code>
                tag of
                <strong>Single File Components (SFC)</strong>
                using template syntax rules (see
                <a href="/base/template" target="_blank">Template</a>
                ), then converted to
                <code>AST.Node[]</code>
                through the
                <strong>CLI</strong>
                .
            </li>
            <li>
                Generated via JS syntax using Core methods like
                <code>createText</code>
                and
                <code>createCommand</code>
                , then assigned to the component's
                <code>template</code>
                property. (Refer to the
                <code>template</code>
                property in
                <a href="/base/component-property" target="_blank">Component Properties</a>
                for details.)
            </li>
        </ol>
        <p>
            Both methods produce
            <code>AST.Node[]</code>
            , where AST.Node serves as the base model class divided into four functional types:
            <code>Text</code>
            ,
            <code>Element</code>
            ,
            <code>Comment</code>
            , and
            <code>Component</code>
            . The base AST.Node has the following properties:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>Child nodes</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>Node type</td>
                    <td>NodeType</td>
                </tr>
            </tbody>
        </table>
        <p>
            Use the
            <code>type</code>
            field to determine the specific AST.Node type:
        </p>
        <pre><code class="language-ts">// This enum can be obtained via AST.NodeType
export enum NodeType {
    TEXT,     // Text
    COMMENT,  // Comment
    ELEMENT,  // HTML tag
    COMMAND,  // Directive
    COMPONENT // Dynamic component
}

// Example:
item.type === AST.NodeType.COMMENT;
</code></pre>
        <h3>AST.Text (Text Node)</h3>
        <p>AST.Text represents static text content in a template.</p>
        <p>Example:</p>
        <pre><code class="language-html">&lt;p&gt;I am content&lt;/p&gt;
</code></pre>
        <p>
            Here, the content inside the
            <code>&lt;p&gt;</code>
            tag is an AST.Text.
        </p>
        <p>
            Alternatively, use Core's
            <code>createText</code>
            method to create a static text node (takes a single parameter, the text value):
        </p>
        <pre><code class="language-ts">import { Component, createText } from &quot;@joker.front/core&quot;;

export default class extends Component {
    template = () =&gt; {
        return [createText(&quot;I am content&quot;)];
    };
}
</code></pre>
        <p>
            This returns an
            <code>AST.Text</code>
            object with a
            <code>text</code>
            property storing the static content. As a leaf node in the AST, it contains no children.
        </p>
        <h3>AST.Comment (Comment Node)</h3>
        <p>AST.Comment represents HTML comment nodes in templates. Example:</p>
        <pre><code class="language-html">&lt;!--I am a comment--&gt;
</code></pre>
        <p>
            Alternatively, use
            <code>createComment</code>
            to generate a comment node:
        </p>
        <pre><code class="language-ts">import { Component, createComment } from &quot;@joker.front/core&quot;;

export default class extends Component {
    template = () =&gt; {
        return [createComment(&quot;I am a comment&quot;)];
    };
}
</code></pre>
        <p>
            This returns an
            <code>AST.Comment</code>
            object with a
            <code>text</code>
            property storing the comment. As a leaf node, it has no children.
        </p>
        <blockquote>
            <p>In production builds, AST.Comment nodes are stripped by default to minimize output size.</p>
        </blockquote>
        <h3>AST.Element (Tag Node)</h3>
        <p>
            AST.Element represents HTML tags (e.g.,
            <code>div</code>
            ,
            <code>span</code>
            ) or component names. During AST compilation, Core cannot determine if a tag refers to a componentâ€”this is resolved during runtime based on component registrations.
        </p>
        <p>
            <img src="/base/ast-element.png" alt="AST-Element" />
        </p>
        <p>
            Example HTML and equivalent
            <code>createElement</code>
            usage:
        </p>
        <pre><code class="language-html">&lt;div attr=&quot;v1&quot; class=&quot;@v2&quot; @click=&quot;handleClick&quot;&gt;
    &lt;span&gt;I am content&lt;/span&gt;
&lt;/div&gt;
</code></pre>
        <pre><code class="language-ts">createElement(
    &quot;div&quot;,
    {
        attr: &quot;v1&quot;,
        class: &quot;@v2&quot;,
        &quot;@click&quot;: &quot;handleClick&quot;
    },
    [createElement(&quot;span&quot;, undefined, [createText(&quot;I am content&quot;)])]
);
</code></pre>
        <p>Attributes like dynamic directives and events are passed as-is; parsing occurs internally.</p>
        <h4>
            <code>createElement</code>
            Parameters:
        </h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>tagName</td>
                    <td>Tag name</td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>attr</td>
                    <td>Attributes</td>
                    <td>object</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>Child nodes</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h4>AST.Element Properties (inherits from AST.Node):</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>tagName</td>
                    <td>Tag name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Children</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>Events</td>
                    <td>AST.Event[]</td>
                </tr>
                <tr>
                    <td>attributes</td>
                    <td>Attributes</td>
                    <td>AST.Attribute[]</td>
                </tr>
            </tbody>
        </table>
        <h4>AST.Event Structure:</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>Event name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>modifiers</td>
                    <td>Modifiers</td>
                    <td>
                        string[] (see
                        <a href="/base/template-event" target="_blank">Event Handling</a>
                        )
                    </td>
                </tr>
                <tr>
                    <td>functionName</td>
                    <td>Handler name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>functionParam</td>
                    <td>Handler args</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <h4>AST.Attribute Structure:</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>Attribute name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>value</td>
                    <td>Static value</td>
                    <td>string | undefined</td>
                </tr>
                <tr>
                    <td>express</td>
                    <td>Dynamic expression</td>
                    <td>string | undefined</td>
                </tr>
            </tbody>
        </table>
        <h3>AST.Command (Directive Node)</h3>
        <p>AST.Command handles dynamic directives, categorized into:</p>
        <ul>
            <li>
                <code>IfCommand</code>
                (conditional)
            </li>
            <li>
                <code>ForCommand</code>
                (loop)
            </li>
            <li>
                <code>SectionCommand</code>
                (block)
            </li>
            <li>
                <code>PropertyOrFunctionCommand</code>
                (dynamic value)
            </li>
        </ul>
        <p>Base AST.Command properties:</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>Directive name</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>isGroup</td>
                    <td>
                        Whether it's a group (e.g.,
                        <code>if/for</code>
                        with
                        <code>
                            {}
                        </code>
                        )
                    </td>
                    <td>boolean</td>
                </tr>
            </tbody>
        </table>
        <p>
            Use
            <code>createCommand</code>
            for group nodes (if/for/section) and
            <code>createCodeFunction</code>
            for dynamic values:
        </p>
        <pre><code class="language-ts">createCommand(&quot;for&quot;, &quot;let item of list&quot;, [
    createElement(&quot;div&quot;, undefined, [
        createCodeFunction(&quot;item&quot;) // Dynamic value
    ])
]);
</code></pre>
        <h4>
            <code>createCommand</code>
            Parameters:
        </h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>
                        Directive name (
                        <code>if</code>
                        /
                        <code>elseif</code>
                        /
                        <code>else</code>
                        /
                        <code>for</code>
                        /
                        <code>section</code>
                        )
                    </td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>param</td>
                    <td>Directive parameters</td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>Children</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h4>Command Subtypes:</h4>
        <ol>
            <li>
                <p>
                    <strong>IfCommand</strong>
                    :
                </p>
                <table class="mkd-table">
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Description</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>cmdName</td>
                            <td>
                                <code>if</code>
                            </td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>kind</td>
                            <td>
                                <code>if</code>
                                /
                                <code>elseif</code>
                                /
                                <code>else</code>
                            </td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>condition</td>
                            <td>Condition expression</td>
                            <td>string</td>
                        </tr>
                    </tbody>
                </table>
            </li>
            <li>
                <p>
                    <strong>ForCommand</strong>
                    :
                </p>
                <table class="mkd-table">
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Description</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>cmdName</td>
                            <td>
                                <code>for</code>
                            </td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>keyType</td>
                            <td>
                                <code>in</code>
                                /
                                <code>of</code>
                                /
                                <code>condition</code>
                            </td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>param</td>
                            <td>Loop parameters</td>
                            <td>
                                <code>AST.ConditionParam</code>
                                |
                                <code>AST.InOrOfParam</code>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <ul>
                    <li>
                        <p>
                            <code>ConditionParam</code>
                            (conditional loops):
                        </p>
                        <table class="mkd-table">
                            <thead>
                                <tr>
                                    <th>Property</th>
                                    <th>Description</th>
                                    <th>Type</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>letKey</td>
                                    <td>
                                        Item key (e.g.,
                                        <code>let item</code>
                                        )
                                    </td>
                                    <td>string</td>
                                </tr>
                                <tr>
                                    <td>defaultKeyVal</td>
                                    <td>Default value</td>
                                    <td>any</td>
                                </tr>
                                <tr>
                                    <td>condition</td>
                                    <td>Condition</td>
                                    <td>string</td>
                                </tr>
                                <tr>
                                    <td>step</td>
                                    <td>Step expression</td>
                                    <td>string</td>
                                </tr>
                            </tbody>
                        </table>
                    </li>
                    <li>
                        <p>
                            <code>InOrOfParam</code>
                            (
                            <code>for in</code>
                            /
                            <code>for of</code>
                            ):
                        </p>
                        <table class="mkd-table">
                            <thead>
                                <tr>
                                    <th>Property</th>
                                    <th>Description</th>
                                    <th>Type</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>indexKey</td>
                                    <td>Index key</td>
                                    <td>string | undefined</td>
                                </tr>
                                <tr>
                                    <td>itemKey</td>
                                    <td>Item key</td>
                                    <td>string</td>
                                </tr>
                                <tr>
                                    <td>dataKey</td>
                                    <td>Target expression to iterate</td>
                                    <td>string</td>
                                </tr>
                            </tbody>
                        </table>
                    </li>
                </ul>
            </li>
            <li>
                <p>
                    <strong>SectionCommand</strong>
                    :
                </p>
                <table class="mkd-table">
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Description</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>cmdName</td>
                            <td>
                                <code>section</code>
                            </td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>id</td>
                            <td>Block ID</td>
                            <td>string</td>
                        </tr>
                        <tr>
                            <td>paramKeys</td>
                            <td>Block parameters</td>
                            <td>string</td>
                        </tr>
                    </tbody>
                </table>
            </li>
        </ol>
        <h3>AST.Component (Dynamic Component)</h3>
        <p>
            This type does not appear in SFC template parsing. It's used exclusively for dynamic rendering via JS (e.g.,
            <code>createComponent</code>
            ). Static templates should use
            <code>AST.Element</code>
            .
        </p>
        <p>Example:</p>
        <pre><code class="language-ts">import MyComponent from &quot;./children.joker&quot;;

createComponent(
    MyComponent,
    {
        message: &quot;@model.message&quot;,
        &quot;@click&quot;: &quot;handleClick&quot;
    },
    [createText(&quot;I am text&quot;)] // Children
);
</code></pre>
        <h4>
            <code>createComponent</code>
            Parameters:
        </h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>component</td>
                    <td>Component class/instance</td>
                    <td>
                        <code>IComponent</code>
                        |
                        <code>(new (...args: any[]) =&gt; IComponent)</code>
                    </td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>attrs</td>
                    <td>Attributes</td>
                    <td>object</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>Children</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h4>AST.Component Properties:</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>Children</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>attributes</td>
                    <td>Component props</td>
                    <td>AST.Attribute[]</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>Component events</td>
                    <td>AST.Event[]</td>
                </tr>
                <tr>
                    <td>component</td>
                    <td>Component reference</td>
                    <td>
                        <code>IComponent</code>
                        |
                        <code>(new (...args: any[]) =&gt; IComponent)</code>
                    </td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
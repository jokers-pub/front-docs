<template>
    <div ref="container" class="joker-demo-container">
        <h2>Event Registration</h2>
        <p>This section introduces how to register interactive events for tags/components in the template.</p>
        <h3>Listening to Events</h3>
        <p>
            We can use the
            <code>
                @("@event-name")
            </code>
            directive to listen to DOM/component events and execute corresponding JavaScript when the event is triggered.
        </p>
        <pre><code class="language-html">&lt;button @click=&quot;handleClick&quot;&gt;Button&lt;/button&gt;
</code></pre>
        <p>
            The example above demonstrates registering a
            <code>click</code>
            event for a button with the event handler function
            <strong>handleClick</strong>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;button @click=&quot;handleClick&quot;&gt;Click me!&lt;/button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { MessageBox } from &quot;@joker.front/ui&quot;;

export default class extends Component {
    handleClick() {
        MessageBox.alert(&quot;You clicked a button.&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Passing Event Parameters</h3>
        <p>There are two types of event parameters:</p>
        <ol>
            <li>
                <strong>Event Object Parameter</strong>
                : This parameter is passed by
                <a href="/base/component-api" target="_blank"><code>$trigger</code></a>
                and propagates through components along with the event.
            </li>
            <li>
                <strong>Execution Event Method Parameter</strong>
                : This parameter acts as the event argument, applying only to the current component and the ongoing event.
            </li>
        </ol>
        <p>Hereâ€™s how to pass parameters during event execution:</p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;button @click=&quot;handleClick('parameter')&quot;&gt;Button&lt;/button&gt;
&lt;/template&gt;
&lt;script&gt;
    import { Component } from &quot;@joker.front/core&quot;;
    export default class extends Component {
        handleClick(e: VNode.Event, param: string) {
            //TODO: param
        }
    }
&lt;/script&gt;
</code></pre>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;button @click=&quot;handleClick('I am the parameter passed by the execution event')&quot;&gt;Click me!&lt;/button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { MessageBox } from &quot;@joker.front/ui&quot;;

export default class extends Component {
    handleClick(e: VNode.Event, param: string) {
        MessageBox.alert(param);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Introduction to VNode.Event</h3>
        <p>
            <code>VNode.Event</code>
            serves as the event handling object in
            <strong>Joker Frontend</strong>
            . Whether the event is actively triggered via JS or originates from a native event, this type is passed as the first parameter to the event handler function.
        </p>
        <p>
            This object includes a
            <code>data</code>
            property, representing the event parameters. It can be typed using generics for ease of use in subsequent operations (default:
            <code>undefined</code>
            ).
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>eventName</code>
                    </td>
                    <td>Event name</td>
                    <td>
                        <code>string</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>event</code>
                    </td>
                    <td>Native event object (platform-dependent)</td>
                    <td>
                        <code>any</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>target</code>
                    </td>
                    <td>The virtual node responding to the event</td>
                    <td>
                        <code>VNode.Node</code>
                        /
                        <code>undefined</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>data</code>
                    </td>
                    <td>Event parameter(s)</td>
                    <td>
                        <code>&lt;T&gt;: any</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>preventDefault</code>
                    </td>
                    <td>Prevents the default event</td>
                    <td>
                        <code>function</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>stopPropagation</code>
                    </td>
                    <td>Stops event propagation</td>
                    <td>
                        <code>function</code>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Event Modifiers</h3>
        <p>
            We provide a rich set of
            <strong>event modifiers</strong>
            to help developers handle logic more efficiently without delving into DOM event complexities.
        </p>
        <p>
            With
            <strong>Joker's VSCODE tool</strong>
            , suggested modifiers appear automatically when typing an event. The currently available modifiers include:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Modifier</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>stop</code>
                    </td>
                    <td>
                        Stops event bubbling (equivalent to
                        <code>event.stopPropagation()</code>
                        in JavaScript).
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>prevent</code>
                    </td>
                    <td>
                        Prevents the default behavior (if the event can be canceled, it is canceled without stopping propagation; equivalent to
                        <code>event.preventDefault()</code>
                        ).
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>self</code>
                    </td>
                    <td>
                        Only triggers the event if the current element is the target. The handler does not fire if the event originates from child elements.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>once</code>
                    </td>
                    <td>Ensures the event fires only once and is then automatically removed.</td>
                </tr>
                <tr>
                    <td>
                        <code>passive</code>
                    </td>
                    <td>
                        Signals the browser that the event handler does not call
                        <code>preventDefault()</code>
                        , optimizing performance for passive event listeners.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>outside</code>
                    </td>
                    <td>
                        Triggers the event only when clicking an area
                        <strong>outside</strong>
                        the element. Implemented via global event listeners. Recommended to use with
                        <code>if</code>
                        to ensure proper cleanup.
                    </td>
                </tr>
            </tbody>
        </table>
        <blockquote>
            <p>
                <strong>
                    Note on
                    <code>outside</code>
                </strong>
                : The
                <code>outside</code>
                modifier checks whether the triggered DOM event target is
                <strong>not</strong>
                within the node (including nested elements)
                <strong>and</strong>
                is also not a contained relationship in the
                <strong>VNode.Node</strong>
                structure. For details, refer to the
                <strong>append-to</strong>
                property in
                <a href="/base/template-property" target="_blank">Component Built-in Properties</a>
                .
            </p>
        </blockquote>
        <p>
            For
            <strong>keyboard events</strong>
            , the following modifiers are available:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Modifier</th>
                    <th>Key</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>enter</code>
                    </td>
                    <td>Enter key</td>
                </tr>
                <tr>
                    <td>
                        <code>tab</code>
                    </td>
                    <td>Tab key</td>
                </tr>
                <tr>
                    <td>
                        <code>delete</code>
                    </td>
                    <td>Delete/Backspace key</td>
                </tr>
                <tr>
                    <td>
                        <code>esc</code>
                    </td>
                    <td>Escape key</td>
                </tr>
                <tr>
                    <td>
                        <code>space</code>
                    </td>
                    <td>Spacebar</td>
                </tr>
                <tr>
                    <td>
                        <code>up</code>
                    </td>
                    <td>Up arrow key</td>
                </tr>
                <tr>
                    <td>
                        <code>down</code>
                    </td>
                    <td>Down arrow key</td>
                </tr>
                <tr>
                    <td>
                        <code>left</code>
                    </td>
                    <td>Left arrow key</td>
                </tr>
                <tr>
                    <td>
                        <code>right</code>
                    </td>
                    <td>Right arrow key</td>
                </tr>
            </tbody>
        </table>
        <p>
            For
            <strong>mouse events</strong>
            , we provide these modifiers:
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Modifier</th>
                    <th>Mouse Action</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>left</code>
                    </td>
                    <td>Left mouse button</td>
                </tr>
                <tr>
                    <td>
                        <code>right</code>
                    </td>
                    <td>Right mouse button</td>
                </tr>
                <tr>
                    <td>
                        <code>middle</code>
                    </td>
                    <td>Middle mouse wheel</td>
                </tr>
            </tbody>
        </table>
        <p>
            <strong>System Modifiers</strong>
            (available for keyboard/mouse events):
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Modifier</th>
                    <th>Key</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>ctrl</code>
                    </td>
                    <td>Ctrl key</td>
                </tr>
                <tr>
                    <td>
                        <code>alt</code>
                    </td>
                    <td>Alt key</td>
                </tr>
                <tr>
                    <td>
                        <code>shift</code>
                    </td>
                    <td>Shift key</td>
                </tr>
            </tbody>
        </table>
        <p>
            <strong>Note</strong>
            : These modifiers can be
            <strong>chained together</strong>
            for a single event to accommodate different scenarios:
        </p>
        <pre><code class="language-html">&lt;button @click.ctrl.prevent.stop=&quot;handleClick&quot;&gt;Button&lt;/button&gt;
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo2 from "../../../examples/base/template-event/demo2.joker";
import DEMO_JOKER_demo1 from "../../../examples/base/template-event/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Joker Component Styling Overview</h2>
        <p>
            This section introduces the rendering styles for component templates. We can use the
            <code>style</code>
            tag to add styles to template rendering.
        </p>
        <h3>Overview</h3>
        <p>
            The style tag supports three styling languages by default:
            <code>css</code>
            , along with
            <code>scss</code>
            and
            <code>less</code>
            . We can switch between styling languages by configuring the
            <strong>lang</strong>
            attribute of the style tag (after switching, the Joker Front Tools VSCode extension will automatically apply the corresponding syntax highlighting and code inspection). Let's look at an example:
        </p>
        <pre><code class="language-html">&lt;style lang=&quot;scss&quot;&gt;
    div {
        span {
            background: red;
        }
    }
&lt;/style&gt;
</code></pre>
        <h3>Scoped Styles</h3>
        <p>
            In addition to the lang attribute, the style tag also provides the
            <code>scoped</code>
            attribute. When a &lt;style&gt; tag has the scoped attribute, its CSS will only affect elements within the current component, similar to style encapsulation in Shadow DOM. There are a few caveats when using it, but the benefit is that it requires no polyfill. The implementation works via PostCSS to transform the following:
        </p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;example&quot;&gt;Hello&lt;/div&gt;
&lt;/template&gt;
&lt;style scoped&gt;
    .example {
        color: red;
    }
&lt;/style&gt;
</code></pre>
        <p>Into:</p>
        <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;example&quot; data-scoped-981d2c8a&gt;Hello&lt;/div&gt;
&lt;/template&gt;  
&lt;style&gt;
    .example[data-scoped-981d2c8a] {
        color: red;
    }
&lt;/style&gt;
</code></pre>
        <p>Scoped styles effectively isolate styles between components.</p>
        <h3>Style Deep Penetration</h3>
        <p>
            With scoped enabled, parent component styles won't propagate into child components. However, a child component's root node will be affected by both the parent's scoped styles and its own scoped styles. This design allows parents to adjust child root element styles from a layout perspective.
        </p>
        <p>
            For certain use cases where a parent needs to modify styles of a child component with scoped, we can use
            <code>:deep()</code>
            to penetrate styles and alter child component styles. For example:
        </p>
        <pre><code class="language-html">&lt;style scoped&gt;
    .a :deep(.b) {
        /* ... */  
    }
&lt;/style&gt;
</code></pre>
        <p>The above code will be compiled into:</p>
        <pre><code class="language-css">.a[data-scoped-981d2c8a] .b {
    /* ... */
}
</code></pre>
        <p>
            We frequently use style deep penetration to control child component styling. It can also be used in child components to modify
            <strong>parent container block template</strong>
            styles.
        </p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
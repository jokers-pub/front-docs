<template>
    <div ref="container" class="joker-demo-container">
        <h2>Production Build Configuration</h2>
        <p>
            This section introduces the configuration specifications for the
            <code>build</code>
            property in the configuration file, which is of type
            <code>BuildOptions</code>
            .
        </p>
        <pre><code class="language-js">module.exports = {
    build: {
        //...
    }
};
</code></pre>
        <h3>write</h3>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>true</code>
            </li>
        </ul>
        <p>
            Determines whether to output files. Default is
            <code>true</code>
            . Can be set to
            <code>false</code>
            for debugging or testing scenarios.
        </p>
        <h3>target</h3>
        <ul>
            <li>
                Type:
                <code>string | string[]</code>
            </li>
            <li>
                Default:
                <code>
                    [&quot;es2020&quot;, &quot;edge88&quot;, &quot;firefox78&quot;, &quot;chrome87&quot;, &quot;safari13&quot;]
                </code>
            </li>
        </ul>
        <p>
            Specifies the target browser compatibility versions for the final build.
            <br />
            <strong>Note:</strong>
            If your code contains features that esbuild cannot safely compile, the build process will fail. Refer to the
            <a href="https://esbuild.github.io/content-types/#javascript" target="_blank">esbuild documentation</a>
            for more details.
        </p>
        <h3>rollupOptions</h3>
        <ul>
            <li>
                Type:
                <code>RollupOptions</code>
            </li>
            <li>
                Default:
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            Allows customization of the underlying Rollup bundling configuration. These options will be identical to those exported from a Rollup config file and will be merged with Joker CLI's internal Rollup options. For more information about Rollup options, see the
            <a href="https://rollupjs.org/configuration-options/" target="_blank">Rollup Configuration Options</a>
            .
        </p>
        <h3>outDir</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>dist</code>
            </li>
        </ul>
        <p>Specifies the output directory for generated files, relative to the project root directory.</p>
        <h3>sourcemap</h3>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>false</code>
            </li>
        </ul>
        <p>
            Determines whether to generate source map files after the build. If set to
            <code>true</code>
            , a separate source map file will be generated. Joker CLI only supports generating standalone source map files (does not support
            <code>inline</code>
            ,
            <code>hidden</code>
            , etc.).
        </p>
        <h3>assetsDir</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>assets</code>
            </li>
        </ul>
        <p>
            Specifies the directory for static assets (relative to
            <code>build.outDir</code>
            ).
            <strong>
                Not applicable in
                <code>library mode</code>
                .
            </strong>
        </p>
        <p>
            To prevent Joker CLI from creating an assets directory, set this to an empty string (
            <code>''</code>
            ).
        </p>
        <h3>assetsInlineLimit</h3>
        <ul>
            <li>
                Type:
                <code>number</code>
            </li>
            <li>
                Default:
                <code>4096</code>
                (4 KiB)
            </li>
        </ul>
        <p>
            Assets smaller than this threshold (in bytes) will be inlined as base64-encoded strings to minimize HTTP requests. Set to
            <code>0</code>
            to disable inlining.
        </p>
        <blockquote>
            <p>
                <strong>Note:</strong>
                When
                <code>build.lib</code>
                is configured,
                <code>build.assetsInlineLimit</code>
                is ignored.
            </p>
        </blockquote>
        <h3>minify</h3>
        <ul>
            <li>
                Type:
                <code>boolean | &quot;esbuild&quot; | &quot;terser&quot;</code>
            </li>
            <li>
                Default:
                <code>true</code>
            </li>
        </ul>
        <p>
            When set to
            <code>true</code>
            , the
            <code>esbuild</code>
            minifier is used. If
            <code>false</code>
            , minification is disabled. Alternatively, a specific minifier can be chosen. By default,
            <code>esbuild</code>
            is ~20-40x faster than
            <code>terser</code>
            with only a 1%-2% difference in compression ratio.
        </p>
        <p>
            <strong>Note:</strong>
            In
            <code>lib</code>
            mode, if
            <code>esbuild</code>
            is used as the minifier,
            <code>build.minify</code>
            will
            <strong>not</strong>
            remove whitespace, as doing so could strip
            <code>pure</code>
            annotations and affect tree-shaking.
        </p>
        <p>
            To use
            <code>terser</code>
            , it must be installed first:
        </p>
        <pre><code class="language-bash">pnpm add terser
</code></pre>
        <h3>lib</h3>
        <ul>
            <li>
                Type:
                <code>LibraryOptions | false</code>
            </li>
            <li>
                Default:
                <code>false</code>
            </li>
        </ul>
        <p>
            Enables
            <strong>library mode</strong>
            when configured.
        </p>
        <p>
            The
            <code>LibraryOptions</code>
            type is defined as:
        </p>
        <pre><code class="language-ts">export interface LibraryOptions {
    /**
     * Entry file  
     */
    entry: string;  
    /**
     * Alias name  
     */
    name?: string;  
    /**
     * Output formats  
     * @default [es, umd]  
     */
    formats?: LibraryFormatType[];  

    /**
     * Output file name (defaults to original filename if not specified)  
     */
    fileName?: string | ((format: ModuleFormat) =&gt; string);  
}  

export type LibraryFormatType = &quot;es&quot; | &quot;cjs&quot; | &quot;umd&quot; | &quot;iife&quot;;  
</code></pre>
        <h3>chunkSizeWarningLimit</h3>
        <ul>
            <li>
                Type:
                <code>number</code>
            </li>
            <li>
                Default:
                <code>500</code>
            </li>
        </ul>
        <p>
            Sets a warning threshold (in kB) for uncompressed chunk sizes. JavaScript chunk size correlates with execution time, so this helps identify potentially oversized chunks requiring optimization.
        </p>
        <h3>cssTarget</h3>
        <ul>
            <li>
                Type:
                <code>string | string[]</code>
            </li>
            <li>
                Default:
                <code>
                    [&quot;es2020&quot;, &quot;edge88&quot;, &quot;firefox78&quot;, &quot;chrome87&quot;, &quot;safari13&quot;]
                </code>
            </li>
        </ul>
        <p>Allows specifying a separate browser target for CSS minification, distinct from JavaScript transpilation.</p>
        <p>
            Use primarily for non-mainstream or legacy browsers. Example: Android WeChat WebView supports modern JS but not RGBA hex colors in CSS. Setting
            <code>build.cssTarget</code>
            to
            <code>chrome61</code>
            prevents Joker CLI from converting RGBA to
            <code>#RGBA</code>
            hex notation.
        </p>
        <h3>copyPublicDir</h3>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>true</code>
            </li>
        </ul>
        <p>
            By default, the
            <code>publicDir</code>
            folder is copied to
            <code>outDir</code>
            after building. Set to
            <strong>false</strong>
            to disable this behavior.
        </p>
        <h3>publicBaseDir</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>true</code>
            </li>
        </ul>
        <p>
            Controls the base path for static public assets in the build output. If unset, defaults to
            <code>config.base</code>
            .
        </p>
        <h3>Worker Compilation Extensions</h3>
        <ul>
            <li>
                Type:
                <code>
                    {rollupOptions?: RollupOptions; plugins?: (input: string) =&gt; Promise&lt;RollupPlugin&gt;}
                </code>
            </li>
        </ul>
        <p>Enables custom extensions for worker compilation.</p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Public Configuration</h2>
        <p>
            This section primarily introduces the configuration file specifications and instructions provided by Joker CLI.
        </p>
        <h3>How to Use Configuration Files</h3>
        <p>
            In addition to configuring Joker CLI via command-line parameters (e.g.,
            <code>--log</code>
            ), you can also set execution parameters by creating dedicated configuration files. Using configuration files not only accommodates more complex functional requirements but also provides detailed configuration directives for
            <code>rollup</code>
            . This approach enhances flexibility and convenience, improving the overall user experience and efficiency.
        </p>
        <p>
            You can create
            <code>.js</code>
            files as configuration files, which can be placed anywhere in your projectâ€”for example,
            <code>build/dev.config.js</code>
            . Additionally, you can create multiple configuration files for different environments, such as:
        </p>
        <ul>
            <li>
                <code>dev.server.js</code>
                : Development server environment configuration
            </li>
            <li>
                <code>dev.build.js</code>
                : Development build environment configuration
            </li>
            <li>
                <code>prod.config.js</code>
                : Production build configuration
            </li>
            <li>
                <code>st.config.js</code>
                : Security Testing environment configuration
            </li>
            <li>And more</li>
        </ul>
        <p>
            You can define multiple execution commands in the
            <code>scripts</code>
            section of
            <code>package.json</code>
            and select different configuration files:
        </p>
        <pre><code class="language-json">{
    &quot;scripts&quot;: {
        &quot;dev&quot;: &quot;joker --config=dev.config.js&quot;,
        &quot;build&quot;: &quot;joker build --config=build.config.js&quot;
    }
}
</code></pre>
        <p>
            You can specify different configuration files using the
            <code>config</code>
            property.
        </p>
        <p>
            The configuration file adheres to the
            <a href="https://wiki.commonjs.org/wiki/CommonJS" target="_blank">CommonJS</a>
            specification. You can export configuration information via
            <code>module.exports</code>
            .
        </p>
        <pre><code class="language-js">module.exports = {
    root: &quot;./src&quot;
};
</code></pre>
        <p>Below, we will detail the properties available in the configuration file:</p>
        <h3>root</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>process.cwd()</code>
            </li>
        </ul>
        <p>
            When the
            <code>root</code>
            parameter is specified, it defines the starting directory of the application. This directory can be either an absolute path or a relative path based on the current working directory (
            <code>process.cwd()</code>
            ). The application will execute from this root directory, and all relative paths will be resolved based on it.
        </p>
        <h3>base</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>/</code>
            </li>
        </ul>
        <p>
            In development or production environments, the service's public base path can accept the following valid values:
        </p>
        <ul>
            <li>
                An absolute pathname, such as
                <code>/base/</code>
                , indicating the path starts from the root directory of the website.
            </li>
            <li>
                A full URL, such as
                <code>https://base.com/</code>
                . In development, the original URL segment is not used and serves only as a placeholder.
            </li>
            <li>
                An empty string or
                <code>./</code>
                , used for development environments with embedded services, representing the current directory.
            </li>
        </ul>
        <h3>mode</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>development</code>
            </li>
        </ul>
        <p>
            The
            <code>mode</code>
            parameter specifies the application's runtime mode, supporting
            <code>development</code>
            or
            <code>production</code>
            . These two modes correspond to the development and production environments, respectively. Once configured, the mode can be accessed and utilized via environment variables.
        </p>
        <h3>command</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>server</code>
            </li>
        </ul>
        <p>
            <strong>
                <code>command</code>
                cannot be manually configured
            </strong>
            . It indicates the current command mode. During Joker CLI startup, the
            <code>command</code>
            value is automatically set. For example,
            <code>server</code>
            denotes starting the development service mode, while
            <code>build</code>
            represents the build mode.
        </p>
        <h3>server</h3>
        <ul>
            <li>
                Type:
                <code>ServerOptions</code>
            </li>
        </ul>
        <blockquote>
            <p>
                For detailed configurations, refer to the
                <a href="/cli/setting-server" target="_blank">Development Service</a>
                documentation.
            </p>
        </blockquote>
        <h3>build</h3>
        <ul>
            <li>
                Type:
                <code>BuildOptions</code>
            </li>
        </ul>
        <blockquote>
            <p>
                For detailed configurations, refer to the
                <a href="/cli/setting-build" target="_blank">Production Build</a>
                documentation.
            </p>
        </blockquote>
        <h3>cacheDir</h3>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>node_modules/.joker</code>
            </li>
        </ul>
        <p>
            Defines the cache directory where dependency caches and other files are stored. The default is
            <code>.joker</code>
            under the
            <code>node_modules</code>
            folder in the directory containing
            <code>package.json</code>
            . For more details, see
            <a href="/cli/dep" target="_blank">Dependency Pre-Building</a>
            .
        </p>
        <h3>publicDir</h3>
        <ul>
            <li>
                Type:
                <code>string | false</code>
            </li>
            <li>
                Default:
                <code>public</code>
            </li>
        </ul>
        <p>
            The static assets directory contains files that remain unchanged during development and builds. In development, these files are served from the root directory (
            <code>/</code>
            ). In production builds, they are copied to the root of the
            <code>outDir</code>
            . The path can be either an absolute path or a relative path from the project root.
        </p>
        <p>
            Setting
            <code>publicDir</code>
            to
            <code>false</code>
            disables this feature.
        </p>
        <h3>logLeve</h3>
        <ul>
            <li>
                Type:
                <code>
                    &quot;silent&quot; | &quot;error&quot; | &quot;warn&quot; | &quot;info&quot; | &quot;debug&quot;
                </code>
            </li>
            <li>
                Default:
                <code>info</code>
            </li>
        </ul>
        <p>
            The logging level, defaulting to
            <code>info</code>
            . To debug or understand Joker CLI's internal workings, set it to
            <code>debug</code>
            .
        </p>
        <h3>esbuild</h3>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>true</code>
            </li>
        </ul>
        <p>
            By default, esbuild is used for compiling
            <code>.ts</code>
            files.
        </p>
        <p>
            To use a custom TypeScript compiler, disable esbuild by setting this to
            <code>false</code>
            .
        </p>
        <h3>assetsInclude</h3>
        <ul>
            <li>
                Type:
                <code>string[]</code>
            </li>
            <li>
                Default:
                <code>See ASSET_TYPES below</code>
            </li>
        </ul>
        <p>By configuring additional asset types for processing, you can achieve:</p>
        <ul>
            <li>
                These resources will bypass the plugin transformation pipeline if referenced in HTML or requested via fetch/XHR.
            </li>
            <li>
                If imported in JavaScript, they resolve to a URL string unless transformed by an
                <code>enforce: 'pre'</code>
                plugin.
            </li>
        </ul>
        <p>Joker CLI already handles the following asset types by default:</p>
        <pre><code class="language-ts">export const ASSET_TYPES: string[] = [
    // Images
    &quot;png&quot;,
    &quot;jpe?g&quot;,
    &quot;jfif&quot;,
    &quot;pjpeg&quot;,
    &quot;pjp&quot;,
    &quot;gif&quot;,
    &quot;svg&quot;,
    &quot;ico&quot;,
    &quot;webp&quot;,
    &quot;avif&quot;,

    // Media
    &quot;mp4&quot;,
    &quot;webm&quot;,
    &quot;ogg&quot;,
    &quot;mp3&quot;,
    &quot;wav&quot;,
    &quot;flac&quot;,
    &quot;aac&quot;,

    // Fonts
    &quot;woff2?&quot;,
    &quot;eot&quot;,
    &quot;ttf&quot;,
    &quot;otf&quot;,

    // Others
    &quot;webmanifest&quot;,
    &quot;pdf&quot;,
    &quot;txt&quot;
];
</code></pre>
        <p>This property allows defining new extensions, which combine with the defaults.</p>
        <h3>plugins</h3>
        <ul>
            <li>
                Type:
                <code>Plugin[] | Array&lt;Plugin[]&gt;</code>
            </li>
        </ul>
        <blockquote>
            <p>
                Joker CLI plugins. For details, see
                <a href="#cli/plugin-create">Creating Plugins</a>
                .
            </p>
        </blockquote>
        <h3>resolve</h3>
        <ul>
            <li>
                Type:
                <code>ResolveOptions</code>
            </li>
            <li>
                Default:
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            Configures the resolver by setting
            <code>mainFields</code>
            and
            <code>extensions</code>
            .
        </p>
        <h4>resolve.mainFields</h4>
        <ul>
            <li>
                Type:
                <code>string[]</code>
            </li>
            <li>
                Default:
                <code>[&quot;browser&quot;, &quot;module&quot;, &quot;jsnext:main&quot;, &quot;jsnext&quot;]</code>
            </li>
        </ul>
        <p>
            Defines fields in
            <code>package.json</code>
            to resolve entry points. Note:
            <code>exports</code>
            field takes precedence.
        </p>
        <h4>resolve.extensions</h4>
        <ul>
            <li>
                Type:
                <code>string[]</code>
            </li>
            <li>
                Default:
                <code>[&quot;.js&quot;, &quot;mjs&quot;, &quot;mts&quot;, &quot;.ts&quot;, &quot;.json&quot;]</code>
            </li>
        </ul>
        <p>Customize import extensions carefully to avoid breaking IDE/type support.</p>
        <h3>define</h3>
        <ul>
            <li>
                Type:
                <code>Record&lt;string, any&gt;</code>
            </li>
            <li>
                Default:
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            Environment variable configuration. See
            <a href="/cli/define" target="_blank">Variables &amp; Modes</a>
            .
        </p>
        <h3>css</h3>
        <ul>
            <li>
                Type:
                <code>CSSOptions</code>
            </li>
            <li>
                Default:
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            CSS configuration. Extend compilation features via
            <code>preprocessorOptions</code>
            and
            <code>enableSourceMap</code>
            .
        </p>
        <h4>css.preprocessorOptions</h4>
        <ul>
            <li>
                Type:
                <code>Record&lt;string, any&gt;</code>
            </li>
            <li>
                Default:
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>Options passed to CSS preprocessors, keyed by file extension (e.g., Sass/Less).</p>
        <p>Example:</p>
        <pre><code class="language-json">{
    &quot;sass&quot;: {
        &quot;includePaths&quot;: [&quot;node_modules&quot;]
        // ...
    }
}
</code></pre>
        <h4>enableSourceMap</h4>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>false</code>
            </li>
        </ul>
        <p>Whether to enable source maps.</p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
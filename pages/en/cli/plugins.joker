<template>
    <div ref="container" class="joker-demo-container">
        <h2>Optional Plugins</h2>
        <p>This chapter mainly introduces the official Joker CLI plugins.</p>
        <h3>
            @("@joker.front/cli-plugin-legacy")
        </h3>
        <p>This plugin is mainly responsible for compatibility transformation.</p>
        <p>
            By default, Joker CLI only handles syntax transformation and does not include any polyfills. If you need to provide support for older browsers, you can visit
            <a href="https://polyfill.io/" target="_blank">Polyfill.io</a>
            , a service that can automatically generate polyfill packages based on the user's browser User - Agent.
        </p>
        <p>
            For scenarios that require compatibility with traditional browsers, you can support them by installing and using the plugin
            <code>
                @("@joker.front/cli-plugin-legacy")
            </code>
            . This plugin will automatically generate versions suitable for older browsers and the necessary polyfills to ensure correct operation on these browsers. These compatibility - version chunks will only be loaded on - demand when the target browser does not support native ESM.
        </p>
        <pre><code class="language-js">const { legacyPlugin } = require(&quot;@joker.front/cli-plugin-legacy&quot;);

module.exports = {
    plugins: [
        legacyPlugin({
            targets: [&quot;chrome 80&quot;, &quot;ie &gt;= 10&quot;]
        })
    ]
};
</code></pre>
        <p>This plugin provides the following optional configurations:</p>
        <pre><code class="language-ts">export interface Option {
    /**
     * Target platforms
     * @default 'defaults'
     */
    targets?: string | string[];
    /**
     * Name of the compatibility version file
     * @default '-legacy'
     */
    legacyName?: string;
    /**
     * Whether to use external SystemJs
     */
    externalSystemJs?: boolean;
    /**
     * Compatibility for modern browsers
     */
    modernPolyfills?: string[];
    /**
     * Compatibility handling mechanism for old browsers
     */
    legacyPolyfills?: string[];
}
</code></pre>
        <h4>targets</h4>
        <ul>
            <li>
                <strong>Type</strong>
                :
                <code>
                    string | string[] |{[key: string]: string}
                </code>
            </li>
            <li>
                <strong>Default value</strong>
                :
                <code>last 2 versions and not dead, &gt;0.3%, Firefox ESR</code>
            </li>
        </ul>
        <p>
            When rendering the legacy chunk, if explicitly set, it will be passed to
            <code>
                @("@babel/preset-env")
            </code>
            .
            This query is also compatible with Browserslist. For more details, see [Browserslist](https://github.com/browserslist/browserslist#best - practices) best practices.
        </p>
        <p>
            If not set, plugin - legacy will load the browserslist configuration source and then fallback to the default value.
        </p>
        <h4>legacyName</h4>
        <ul>
            <li>
                <strong>Type</strong>
                :
                <code>string</code>
            </li>
            <li>
                <strong>Default value</strong>
                :
                <code>-legacy</code>
            </li>
        </ul>
        <p>Used to configure the suffix name of the compatibility file.</p>
        <h4>externalSystemJS</h4>
        <ul>
            <li>
                <strong>Type</strong>
                :
                <code>boolean</code>
            </li>
            <li>
                <strong>Default value</strong>
                :
                <code>false</code>
            </li>
        </ul>
        <p>
            The default value is false. Enabling this option will exclude systemjs/dist/s.min.js from the polyfills - legacy chunk.
        </p>
        <h4>modernPolyfills</h4>
        <ul>
            <li>
                <strong>Type</strong>
                :
                <code>boolean | string[]</code>
            </li>
            <li>
                <strong>Default value</strong>
                :
                <code>false</code>
            </li>
        </ul>
        <p>
            The default value is false. Enabling this option will generate a separate polyfills chunk in the modern build (for browsers that support widely available features).
        </p>
        <p>
            Set it to an array of strings to explicitly control the polyfills to be included. For more details, see Polyfill specifiers.
            Note that the
            <code>true</code>
            value (using auto - detection) is not recommended because
            <code>core - js3</code>
            is very aggressive in including polyfills as it supports all cutting - edge features. Even for native ESM support, it will inject
            <strong>15kb</strong>
            of polyfills!
        </p>
        <p>
            If you are not particularly dependent on cutting - edge runtime features, it is entirely possible to avoid using polyfills in the modern build. As an alternative, consider using an on - demand service like Polyfill.io to inject only the necessary polyfills based on the actual browser user - agent (most modern browsers don't need anything).
        </p>
        <h4>legacyPolyfills</h4>
        <p>
            By default, a polyfills chunk will be generated based on the target browser range and the actual usage in the final bundle (detected by
            <code>
                @babel
                /preset - env
            </code>
            's
            <code>useBuiltIns: 'usage'</code>
            ).
            Set it to an array of strings to explicitly control the polyfills to be included. For more details, see Polyfill specifiers.
        </p>
        <p>
            The Polyfill specifier strings for
            <code>legacyPolyfills</code>
            and
            <code>modernPolyfills</code>
            can be any of the following:
        </p>
        <ul>
            <li>
                A sub - import path of
                <code>core - js 3</code>
                - for example,
                <code>es/map</code>
                will import
                <code>core - js/es/map</code>
                [link](https://unpkg.com/browse/core - js@3.35.1/)
            </li>
            <li>
                A separate
                <code>core - js 3</code>
                module - for example,
                <code>es.array.iterator</code>
                will import
                <code>core - js/modules/es.array.iterator.js</code>
                [link](https://unpkg.com/browse/core - js@3.35.1/modules/)
            </li>
        </ul>
        <pre><code class="language-js">const { legacyPlugin } = require(&quot;@joker.front/cli-plugin-legacy&quot;);

module.exports = {
    plugins: [
        legacyPlugin({
            targets: [&quot;chrome 80&quot;, &quot;ie &gt;= 10&quot;],
            legacyPolyfills: [&quot;es.promise.finally&quot;, &quot;es/map&quot;, &quot;es/set&quot;],
            modernPolyfills: [&quot;es.promise.finally&quot;]
        })
    ]
};
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>Optional Plugins</h2>
        <p>This chapter introduces the official Joker CLI plugins.</p>
        <h3>
            @("@joker.front/cli-plugin-legacy")
        </h3>
        <p>This plugin primarily handles compatibility transformations.</p>
        <p>
            By default, Joker CLI only performs syntax transformations and does not include any polyfills. If you need support for legacy browsers, you can visit
            <a href="https://polyfill.io/" target="_blank">Polyfill.io</a>
            , a service that automatically generates polyfill bundles based on the user's browser User-Agent.
        </p>
        <p>
            For scenarios requiring compatibility with legacy browsers, you can install and use the
            <code>
                @("@joker.front/cli-plugin-legacy")
            </code>
            plugin. This plugin automatically generates optimized versions for legacy browsers along with necessary polyfills to ensure proper functionality. These compatibility chunks are loaded on-demand only when the target browser lacks native ESM support.
        </p>
        <pre><code class="language-js">const { legacyPlugin } = require(&quot;@joker.front/cli-plugin-legacy&quot;);

module.exports = {
    plugins: [
        legacyPlugin({
            targets: [&quot;chrome 80&quot;, &quot;ie &gt;= 10&quot;]
        })
    ]
};
</code></pre>
        <p>This plugin offers the following optional configurations:</p>
        <pre><code class="language-ts">export interface Option {
    /**
     * Target platforms
     * @default 'defaults'
     */
    targets?: string | string[];
    /**
     * Legacy bundle filename suffix
     * @default '-legacy'
     */
    legacyName?: string;
    /**
     * Use external SystemJS
     */
    externalSystemJs?: boolean;
    /**
     * Modern browser polyfills
     */
    modernPolyfills?: string[];
    /**
     * Legacy browser polyfill mechanism
     */
    legacyPolyfills?: string[];
}
</code></pre>
        <h4>targets</h4>
        <ul>
            <li>
                Type:
                <code>
                    string | string[] |{[key: string]: string}
                </code>
            </li>
            <li>
                Default:
                <code>last 2 versions and not dead, &gt;0.3%, Firefox ESR</code>
            </li>
        </ul>
        <p>
            When generating legacy chunks, if explicitly set, this value is passed to
            <code>
                @("@babel/preset-env")
            </code>
            .
            <br />
            The query is also compatible with Browserslist. For details, refer to
            <a href="https://github.com/browserslist/browserslist#best-practices" target="_blank">Browserslist</a>
            best practices.
        </p>
        <p>
            If unset, plugin-legacy will load the browserslist configuration source and fall back to the default value.
        </p>
        <h4>legacyName</h4>
        <ul>
            <li>
                Type:
                <code>string</code>
            </li>
            <li>
                Default:
                <code>-legacy</code>
            </li>
        </ul>
        <p>Configures the suffix for compatibility bundles.</p>
        <h4>externalSystemJs</h4>
        <ul>
            <li>
                Type:
                <code>boolean</code>
            </li>
            <li>
                Default:
                <code>false</code>
            </li>
        </ul>
        <p>
            When false (default), the plugin includes systemjs/dist/s.min.js in polyfills-legacy chunks.
            <br />
            When true, the SystemJS dependency is excluded.
        </p>
        <h4>modernPolyfills</h4>
        <ul>
            <li>
                Type:
                <code>boolean | string[]</code>
            </li>
            <li>
                Default:
                <code>false</code>
            </li>
        </ul>
        <p>
            When false (default), no separate polyfills chunk is generated for modern builds (targeting browsers with widely available features).
        </p>
        <p>
            Set to a string array to explicitly control included polyfills. Refer to Polyfill Specifiers for details.
            <br />
            Note: Using
            <code>true</code>
            (auto-detection) is discouraged because
            <code>core-js3</code>
            aggressively includes polyfills for all cutting-edge features – potentially adding
            <strong>15kb</strong>
            even for native ESM browsers!
        </p>
        <p>
            If your project doesn't heavily rely on bleeding-edge features, avoiding modern polyfills entirely is feasible. As an alternative, consider on-demand services like Polyfill.io to inject only necessary polyfills per user agent (most modern browsers require none).
        </p>
        <h4>legacyPolyfills</h4>
        <p>
            By default, a polyfill chunk is generated based on target browser ranges and actual usage detected via
            <code>
                @babel
                /preset-env
            </code>
            's
            <code>useBuiltIns: 'usage'</code>
            .
            <br />
            Set to a string array to explicitly control included polyfills. Refer to Polyfill Specifiers for details.
        </p>
        <p>
            Polyfill specifier strings for both
            <code>legacyPolyfills</code>
            and
            <code>modernPolyfills</code>
            can be either:
        </p>
        <ul>
            <li>
                <code>core-js 3 sub-import paths</code>
                – e.g.,
                <code>es/map</code>
                imports
                <code>core-js/es/map</code>
                <a href="https://unpkg.com/browse/core-js@3.35.1/" target="_blank">link</a>
            </li>
            <li>
                <code>Individual core-js 3 modules</code>
                – e.g.,
                <code>es.array.iterator</code>
                imports
                <code>core-js/modules/es.array.iterator.js</code>
                <a href="https://unpkg.com/browse/core-js@3.35.1/modules/" target="_blank">link</a>
            </li>
        </ul>
        <pre><code class="language-js">const { legacyPlugin } = require(&quot;@joker.front/cli-plugin-legacy&quot;);

module.exports = {
    plugins: [
        legacyPlugin({
            targets: [&quot;chrome 80&quot;, &quot;ie &gt;= 10&quot;],
            legacyPolyfills: [&quot;es.promise.finally&quot;, &quot;es/map&quot;, &quot;es/set&quot;],
            modernPolyfills: [&quot;es.promise.finally&quot;]
        })
    ]
};
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
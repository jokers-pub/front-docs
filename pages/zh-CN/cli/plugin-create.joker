<template>
    <div ref="container" class="joker-demo-container">
        <h2>创建插件</h2>
        <p>
            Joker CLI 插件构建在优秀的 Rollup 插件架构之上，并引入了专为 Joker CLI 设计的独特配置选项。这意味着，一旦编写了一个 Joker CLI 插件，它就可以在开发和生产环境中无缝工作，无需额外配置。
        </p>
        <p>
            在阅读本章节前，请先学习
            <a href="https://rollupjs.org/plugin-development/#plugins-overview" target="_blank">Rollup 插件</a>
            的相关知识，本章节主要介绍 Joker CLI 的一些自有属性。
        </p>
        <h3>命名</h3>
        <p>
            我们建议所有 Joker CLI 的插件命名都以
            <code>
                @("@joker.front/cli-")
            </code>
            作为前缀进行命名，以确保开发人员在引用它时能通过名称来快速区分类库的类型。
        </p>
        <h3>简单的示例</h3>
        <pre><code class="language-js">const fileRegex = /\.(my-file-ext)$/;

export default function myPlugin() {
    return {
        name: &quot;transform-file&quot;,

        transform(src, id) {
            if (fileRegex.test(id)) {
                return {
                    code: compileFileToJS(src),
                    map: null // 如果可行将提供 source map
                };
            }
        }
    };
}
</code></pre>
        <h3>enforce</h3>
        <ul>
            <li>
                类型：
                <code>&quot;pre&quot; | &quot;post&quot;</code>
            </li>
        </ul>
        <p>可指定该插件的执行顺序。</p>
        <ul>
            <li>
                <code>pre</code>
                ：确保插件在 Joker CLI 核心插件之前执行。
            </li>
            <li>
                <code>default</code>
                ：插件将在 Joker CLI 核心插件之后按顺序执行。
            </li>
            <li>
                <code>post</code>
                ：插件将在 Joker CLI 构建过程完成后执行。
            </li>
        </ul>
        <h3>apply</h3>
        <ul>
            <li>
                类型：
                <code>&quot;build&quot; | &quot;server&quot;</code>
            </li>
        </ul>
        <p>用于指定该插件在哪些环境才生效，默认不设置时，代表在所有模式下都执行该插件。</p>
        <h3>configureServer</h3>
        <ul>
            <li>
                类型：
                <code>(server: Server) =&gt; void | Promise&lt;void&gt;</code>
            </li>
        </ul>
        <p>
            是用于配置开发服务器的钩子。我们可以通过该 HOOK 实现
            <code>server</code>
            对象的存储和其它配置。
        </p>
        <pre><code class="language-js">const myPlugin = () =&gt; ({
    name: &quot;configure-server&quot;,
    configureServer(server) {
        // 返回一个在内部中间件安装后
        // 被调用的后置钩子
        return () =&gt; {
            server.middlewares.use((req, res, next) =&gt; {
                // 自定义请求处理...
            });
        };
    }
});

const myPlugin = () =&gt; {
    let server;
    return {
        name: &quot;configure-server&quot;,
        configureServer(_server) {
            server = _server;
        },
        transform(code, id) {
            if (server) {
                // 使用 server...
            }
        }
    };
};
</code></pre>
        <h3>configTransform</h3>
        <ul>
            <li>
                类型：
                <code>(config: ResolvedConfig) =&gt; Promise&lt;void&gt; | void</code>
            </li>
        </ul>
        <p>
            通过该 HOOK 可对
            <code>config</code>
            进行一些配置。我们可以在该方法内对某一个属性配置默认值，也可以对传入的
            <code>config</code>
            进行二次加工处理。
        </p>
        <h3>indexHtmlTransform</h3>
        <p>
            该属性用于扩展对
            <code>html</code>
            的转换，它的配置规则：
        </p>
        <pre><code class="language-ts">export type IndexHtmlTransformHook = (
    content: string,
    option: IndexHtmlTransformOption
) =&gt; IndexHtmlTransformResult | void | Promise&lt;IndexHtmlTransformResult | void&gt;;

export type IndexHtmlTransform =
    | IndexHtmlTransformHook
    | {
          enforce?: Plugin[&quot;enforce&quot;];
          transform: IndexHtmlTransformHook;
      };
</code></pre>
        <p>这个功能允许异步操作，并能够返回以下几种形式中的一种：</p>
        <ul>
            <li>转换后的 HTML 字符串。</li>
            <li>
                描述标签的属性对象数组，用以注入现有的 HTML 中，其中每个标签也可以定义其插入位置（默认在 &lt;head&gt; 标签之前）。
            </li>
            <li>
                一个包含
                <code>
                    {html, tags}
                </code>
                的对象。
            </li>
        </ul>
        <p>例如：将 title 转换为指定值</p>
        <pre><code class="language-js">const htmlPlugin = () =&gt; {
    return {
        name: &quot;html-transform&quot;,
        transformIndexHtml(html) {
            return html.replace(/&lt;title&gt;(.*?)&lt;\/title&gt;/, `&lt;title&gt;Title replaced!&lt;/title&gt;`);
        }
    };
};
</code></pre>
        <h3>hmrUpdate</h3>
        <p>
            HMR 热更新处理钩子函数。该函数只在
            <code>server</code>
            模式下生效。
        </p>
        <pre><code class="language-ts">    /**
     * 热更新模块Update上下文
     * 可以通过该hook实现对modules等属性的更新
     * @param ctx
     */
    hmrUpdate?(ctx: HMRContext, server: Server): ModuleNode[] | void | Promise&lt;ModuleNode[] | void&gt;;
</code></pre>
        <p>我们可以通过配置该函数来监听并自定义处理热更新。</p>
        <pre><code class="language-ts">    hmrUpdate(ctx, server) {
        if (filter(ctx.file) === false) {
            return;
        }

        return hotUpdate(config, ctx, server);
    },
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
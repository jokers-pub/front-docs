<template>
    <div ref="container" class="joker-demo-container">
        <h2>公共配置</h2>
        <p>该章节主要介绍 Joker CLI 提供的配置文件规范及说明。</p>
        <h3>如何使用配置文件</h3>
        <p>
            除了使用 Joker CLI 的命令行参数（如：--log）进行配置外，您还可以通过创建专门的配置文件来设置 Joker CLI 的执行参数。采用配置文件方式，不仅能够满足更加复杂的的功能需求，还能够为
            <code>rollup</code>
            提供详细的配置指令。这种方式提高了配置的灵活性和便捷性，有助于提升使用体验和效率。
        </p>
        <p>
            我们可以创建
            <code>js</code>
            文件来作为配置文件，配置文件可以存放在项目的任何位置，例如：
            <code>build/dev.config.js</code>
            ，并且你也可以创建多个配置文件例如根据环境我们可以创建：
        </p>
        <ul>
            <li>
                <code>dev.server.js</code>
                开发 server 环境配置
            </li>
            <li>
                <code>dev.build.js</code>
                开发环境 build 环境配置
            </li>
            <li>
                <code>prod.config.js</code>
                生产构建配置
            </li>
            <li>
                <code>st.config.js</code>
                安全测试(Security Testing)环境配置
            </li>
            <li>等等</li>
        </ul>
        <p>
            我们可以在
            <code>package.json</code>
            中的
            <strong>script</strong>
            中创建多个执行命令，并选择不同的配置文件：
        </p>
        <pre><code class="language-json">{
    &quot;scripts&quot;: {
        &quot;dev&quot;: &quot;joker --config=dev.config.js&quot;,
        &quot;build&quot;: &quot;joker build --config=build.config.js&quot;
    }
}
</code></pre>
        <p>
            我们可以通过
            <code>config</code>
            属性来指定不同的配置文件。
        </p>
        <p>
            配置配文件采用的是
            <a href="https://wiki.commonjs.org/wiki/CommonJS" target="_blank">CommonJS</a>
            规范，我们可以通过
            <code>module.exports</code>
            来导出我们的配置信息。
        </p>
        <pre><code class="language-js">module.exports = {
    root: &quot;./src&quot;
};
</code></pre>
        <p>接下来我们将介绍下配置文件中的属性配置：</p>
        <h3>root</h3>
        <ul>
            <li>
                类型：
                <code>string</code>
            </li>
            <li>
                默认：
                <code>process.cwd()</code>
            </li>
        </ul>
        <p>
            当指定
            <code>root</code>
            参数时，它定义了应用程序的起始目录。这个目录可以是绝对路径，也可以是相对于当前工作目录
            <code>process.cwd()</code>
            的相对路径。应用程序将从这个指定的根目录开始执行，所有相对于该目录的路径都会基于它进行解析。
        </p>
        <h3>base</h3>
        <ul>
            <li>
                类型：
                <code>string</code>
            </li>
            <li>
                默认：
                <code>/</code>
            </li>
        </ul>
        <p>在开发或生产环境中，服务公共基础路径可以采用以下合法值：</p>
        <ul>
            <li>
                绝对路径名，如
                <code>/base/</code>
                ，这意味着路径从网站的根目录开始。
            </li>
            <li>
                完整的 URL，例如
                <code>https://base.com/</code>
                ，在开发环境中，原始的 URL 部分不会被使用，只起到占位符的作用。
            </li>
            <li>
                空字符串或
                <code>./</code>
                ，这用于开发环境中的嵌入式服务，表示当前目录。
            </li>
        </ul>
        <h3>mode</h3>
        <ul>
            <li>
                类型：
                <code>string</code>
            </li>
            <li>
                默认：
                <code>development</code>
            </li>
        </ul>
        <p>
            <code>mode</code>
            参数用于指定应用程序的运行模式，支持设置为
            <code>development</code>
            或
            <code>production</code>
            。这两个模式分别对应开发环境和生产环境。当模式被配置后，可以通过环境变量进行访问和利用。
        </p>
        <h3>command</h3>
        <ul>
            <li>
                类型：
                <code>string</code>
            </li>
            <li>
                默认：
                <code>server</code>
            </li>
        </ul>
        <p>
            <code>command</code>
            <strong>不允许</strong>
            配置，它用来指示当前的命令模式。在 Joker CLI 启动过程中，
            <code>command</code>
            的值会被自动设置。例如，
            <code>server</code>
            表示启动开发服务模式，而
            <code>build</code>
            则代表执行构建模式。
        </p>
        <h3>server</h3>
        <ul>
            <li>
                类型：
                <code>ServerOptions</code>
            </li>
        </ul>
        <blockquote>
            <p>
                详细配置请参阅
                <a href="/cli/setting-server" target="_blank">开发服务</a>
                配置说明。
            </p>
        </blockquote>
        <h3>build</h3>
        <ul>
            <li>
                类型：
                <code>BuildOptions</code>
            </li>
        </ul>
        <blockquote>
            <p>
                详细配置请参阅
                <a href="/cli/setting-build" target="_blank">生产构建</a>
                配置说明。
            </p>
        </blockquote>
        <h3>cacheDir</h3>
        <ul>
            <li>
                类型：
                <code>string</code>
            </li>
            <li>
                默认：
                <code>node_modules/.joker</code>
            </li>
        </ul>
        <p>
            定义缓存目录，存放 dep 依赖缓存等文件，默认为 package.json 所在文件夹下的 node_modules/.joker。详细内容可参阅
            <a href="/cli/dep" target="_blank">依赖预构建</a>
            。
        </p>
        <h3>publicDir</h3>
        <ul>
            <li>
                类型：
                <code>string|false</code>
            </li>
            <li>
                默认：
                <code>public</code>
            </li>
        </ul>
        <p>
            静态资源服务文件夹用于存放在开发和构建过程中不需要变化的资源文件。在开发阶段，这些文件位于项目根目录的
            <code>/</code>
            位置，便于直接访问。在构建阶段，这些文件会被复制到指定的
            <code>outDir</code>
            根目录下，保持原样提供给用户，无需任何转换。该路径可以是文件系统中的绝对路径，也可以是相对于项目根目录的相对路径。
        </p>
        <p>
            如果将
            <code>publicDir</code>
            设置为
            <code>false</code>
            ，则会禁用这一功能。
        </p>
        <h3>logLeve</h3>
        <ul>
            <li>
                类型：
                <code>
                    &quot;silent&quot; | &quot;error&quot; | &quot;warn&quot; | &quot;info&quot; | &quot;debug&quot;
                </code>
            </li>
            <li>
                默认：
                <code>info</code>
            </li>
        </ul>
        <p>
            日志输出等级，默认为
            <code>info</code>
            ，若你想了解 Joker CLI 运行机制或需要调试 Joker CLI，你可以将其配置为
            <code>debug</code>
            。
        </p>
        <h3>esbuild</h3>
        <ul>
            <li>
                类型：
                <code>boolean</code>
            </li>
            <li>
                默认：
                <code>true</code>
            </li>
        </ul>
        <p>
            默认情况下，esbuild 会被应用在
            <code>ts</code>
            文件的编译环节。
        </p>
        <p>
            当你需要自定义的
            <code>ts</code>
            编译，你可以将其配置为
            <code>false</code>
            来关闭
            <code>esbuild</code>
            功能。
        </p>
        <h3>assetsInclude</h3>
        <ul>
            <li>
                类型：
                <code>string[]</code>
            </li>
            <li>
                默认：
                <code>参考下面ASSET_TYPES内容</code>
            </li>
        </ul>
        <p>用过配置额外处理的资源类型，我们可以实现：</p>
        <ul>
            <li>当这些资源通过 HTML 引用，或者通过 fetch 或 XHR 请求时，它们将不会被插件的转换管道处理。</li>
            <li>
                如果你尝试从 JavaScript 中导入这些资源，你将得到一个解析后的 URL 字符串作为结果。然而，如果你使用了
                <code>enforce: 'pre'</code>
                插件来处理不同类型的资产，这个行为可能会发生变化。
                你可以查看内置的资源类型列表以获取更多信息。
            </li>
        </ul>
        <p>Joker CLI 默认已经将以下类型作为资源类型处理：</p>
        <pre><code class="language-ts">export const ASSET_TYPES: string[] = [
    // images
    &quot;png&quot;,
    &quot;jpe?g&quot;,
    &quot;jfif&quot;,
    &quot;pjpeg&quot;,
    &quot;pjp&quot;,
    &quot;gif&quot;,
    &quot;svg&quot;,
    &quot;ico&quot;,
    &quot;webp&quot;,
    &quot;avif&quot;,

    // media
    &quot;mp4&quot;,
    &quot;webm&quot;,
    &quot;ogg&quot;,
    &quot;mp3&quot;,
    &quot;wav&quot;,
    &quot;flac&quot;,
    &quot;aac&quot;,

    // fonts
    &quot;woff2?&quot;,
    &quot;eot&quot;,
    &quot;ttf&quot;,
    &quot;otf&quot;,

    // other
    &quot;webmanifest&quot;,
    &quot;pdf&quot;,
    &quot;txt&quot;
];
</code></pre>
        <p>在该属性中，你可以定义新的扩展类型。Joker CLI 会将这些自定义扩展与默认扩展结合，共同构成资源扩展值。</p>
        <h3>plugins</h3>
        <ul>
            <li>
                类型：
                <code>Plugin[] | Array&lt;Plugin[]&gt;</code>
            </li>
        </ul>
        <blockquote>
            <p>
                Joker CLI 插件，详细内容请参阅
                <a href="#cli/plugin-create">创建插件</a>
                。
            </p>
        </blockquote>
        <h3>resolve</h3>
        <ul>
            <li>
                类型：
                <code>ResolveOptions</code>
            </li>
            <li>
                默认：
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            该属性用于配置解析器，我们可以通过设置内部的
            <code>mainFields</code>
            及
            <code>extensions</code>
            属性来进行解析配置。
        </p>
        <h4>resolve.mainFields</h4>
        <ul>
            <li>
                类型：
                <code>string[]</code>
            </li>
            <li>
                默认：
                <code>[&quot;browser&quot;,&quot;module&quot;, &quot;jsnext:main&quot;, &quot;jsnext&quot;]</code>
            </li>
        </ul>
        <p>
            在
            <code>package.json</code>
            中，
            <code>resolve.mainFields</code>
            定义了在解析包的入口点时尝试查询的字段列表。请注意，这个列表的优先级低于从
            <code>exports</code>
            字段中解析入口点的优先级：如果通过
            <code>exports</code>
            字段成功找到了入口点，
            <code>resolve.mainFields</code>
            将不会被考虑。
        </p>
        <h4>resolve.extensions</h4>
        <ul>
            <li>
                类型：
                <code>string[]</code>
            </li>
            <li>
                默认：
                <code>[&quot;.js&quot;, &quot;mjs&quot;, &quot;mts&quot;, &quot;.ts&quot;, &quot;.json&quot;]</code>
            </li>
        </ul>
        <p>
            为了在导入时省略特定的扩展名，需谨慎行事，尤其是对于自定义导入类型的扩展名。避免这样做，以免影响 IDE 和类型支持的正常功能。
        </p>
        <h3>define</h3>
        <ul>
            <li>
                类型：
                <code>Record&lt;string, any&gt;</code>
            </li>
            <li>
                默认：
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            环境变量配置，详细请参阅
            <a href="/cli/define" target="_blank">变量与模式</a>
            。
        </p>
        <h3>css</h3>
        <ul>
            <li>
                类型：
                <code>CSSOptions</code>
            </li>
            <li>
                默认：
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            CSS 配置。可通过配置
            <code>preprocessorOptions</code>
            、
            <code>enableSourceMap</code>
            来扩展 css 编译功能。
        </p>
        <h4>css.preprocessorOptions</h4>
        <ul>
            <li>
                类型：
                <code>Record&lt;string, any&gt;</code>
            </li>
            <li>
                默认：
                <code>
                    {}
                </code>
            </li>
        </ul>
        <p>
            指定传递给 CSS 预处理器的选项时，文件扩展名将作为选项的键。关于每个预处理器所支持的选项，具体信息可以在相应的官方文档中查找到：
        </p>
        <ul>
            <li>
                <a href="https://sass-lang.com/documentation/js-api/interfaces/legacystringoptions/" target="_blank">
                    sass/scss
                </a>
            </li>
            <li>
                <a href="https://lesscss.org/usage/#less-options" target="_blank">less</a>
            </li>
        </ul>
        <pre><code class="language-json">{
    &quot;sass&quot;: {
        &quot;includePaths&quot;: [&quot;node_modules&quot;]
        //...
    }
}
</code></pre>
        <h4>enableSourceMap</h4>
        <ul>
            <li>
                类型：
                <code>boolean</code>
            </li>
            <li>
                默认：
                <code>false</code>
            </li>
        </ul>
        <p>是否启用 sourcemap。</p>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>AST 语法树</h2>
        <p>本章主要介绍 Joker 的 模板语法树（AST）。</p>
        <h3>概述</h3>
        <p>
            AST 是 Joker 中 template 的结构化数据，它最终会结合组件实例来渲染出虚拟 Node，并将虚拟 Node 渲染到对应平台中。
        </p>
        <p>它的来源有两种：</p>
        <ul>
            <li>
                通过
                <strong>单文件组件（SFC）</strong>
                中的
                <code>&lt;template&gt;</code>
                标签来编写，编写规则请查看
                <a href="/base/template" target="_blank">模板</a>
                ，并通过
                <strong>CLI</strong>
                转换为
                <code>AST.Node[]</code>
                。
            </li>
            <li>
                通过 Core 中提供的
                <code>createText</code>
                ,
                <code>createCommand</code>
                等方法使用
                <strong>js</strong>
                语法输出 AST.Node[]，并设置到组件 template 属性中。template 属性可查看
                <a href="/base/component-property" target="_blank">组件属性</a>
                中的 template 属性介绍。
            </li>
        </ul>
        <p>
            两种形式都可以输出
            <code>AST.Node[]</code>
            ，AST.Node 是 AST 的基础类模型，按照功能划分为：
            <code>Text</code>
            ,
            <code>Element</code>
            ,
            <code>Comment</code>
            ,
            <code>Component</code>
            四种类型。其中 AST.Node 作为基础模型类，它本身具有以下属性：
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>类型</td>
                    <td>NodeType</td>
                </tr>
            </tbody>
        </table>
        <p>可通过判断 type 值来确定当前 AST.Node 的类型：</p>
        <pre><code class="language-ts">//该枚举可通过AST.NodeType获得
export enum NodeType {
    TEXT, //文本
    COMMENT, //注释
    ELEMENT, //标签
    COMMAND, //指令
    COMPONENT //动态组件
}

//例如：
item.type === AST.NodeType.COMMENT;
</code></pre>
        <h3>AST.Text 文本</h3>
        <p>
            AST.Text 是文本节点的语法类型，它用作表述一个页面中的
            <strong>静态内容文本</strong>
            。
        </p>
        <p>例如：</p>
        <pre><code class="language-html">&lt;p&gt;我是内容&lt;/p&gt;
</code></pre>
        <p>
            其中
            <code>p</code>
            标签中的内容即代表一个 AST.Text。
        </p>
        <p>
            我们也可以通过 Core 提供的
            <code>createText</code>
            方法来创建一个静态文本内容（该方法只有一个参数，参数为静态文本内容的值）：
        </p>
        <pre><code class="language-ts">import { Component, createText } from &quot;@joker.front/core&quot;;

export default class extends Component {
    template = () =&gt; {
        return [createText(&quot;我是内容&quot;)];
    };
}
</code></pre>
        <p>
            该方法将返回一个
            <code>AST.Text</code>
            对象，此类对象包含一个名为
            <code>text</code>
            的属性，用于存储静态文本内容。作为 AST（抽象语法树）中的叶节点，它不包含任何子节点。
        </p>
        <h3>AST.Comment 注释</h3>
        <p>AST.Comment 为注释节点，他可以将 template 中的 html 注释转换为 AST.Node。</p>
        <pre><code class="language-html">&lt;!--我是一条注释--&gt;
</code></pre>
        <p>
            也可以通过
            <code>createComment</code>
            函数来创建一条注释节点。
        </p>
        <pre><code class="language-ts">import { Component, createComment } from &quot;@joker.front/core&quot;;

export default class extends Component {
    template = () =&gt; {
        return [createComment(&quot;我是一条注释&quot;)];
    };
}
</code></pre>
        <p>
            该方法将返回一个
            <code>AST.Comment</code>
            对象，此类对象包含一个名为
            <code>text</code>
            的属性，用于存储注释内容。作为 AST（抽象语法树）中的叶节点，它不包含任何子节点。
        </p>
        <blockquote>
            <p>在生产构建时，为了对输出进行压缩，默认不会将 AST.Comment 进行转换，以减小产物体积。</p>
        </blockquote>
        <h3>AST.Element 标签</h3>
        <p>
            AST.Element 节点代表一个标签，该标签可以是对应平台的标签节点，例如：div、span 等，也可以时一个组件名称，在 AST 编译过程中，Core 是无法确认当前标签名称是否是一个组件，只有在实际渲染时，结合当前组件的实体对象以及全局组件注册才可确认当前标签是否为一个组件。
        </p>
        <p>所以 AST.Element 作为最常用的节点，它承载着通用标签和组件标签的信息记录，并在运行时进行分流处理。</p>
        <p>
            <img src="/base/ast-element.png" alt="AST-Element" />
        </p>
        <p>由于 AST.Element 不区分组件和标签，那我们用一个 html 标签来演示下其工作原理：</p>
        <pre><code class="language-html">&lt;div attr=&quot;v1&quot; class=&quot;@v2&quot; @click=&quot;handleClick&quot;&gt;
    &lt;span&gt;我是文本内容&lt;/span&gt;
&lt;/div&gt;
</code></pre>
        <p>
            我们可以使用
            <code>createElement</code>
            方法来改写上面的写法：
        </p>
        <pre><code class="language-ts">createElement(
    &quot;div&quot;,
    {
        attr: &quot;v1&quot;,
        class: &quot;@v2&quot;,
        &quot;@click&quot;: &quot;handleClick&quot;
    },
    [createElement(&quot;span&quot;, undefined, [createText(&quot;我是文本内容&quot;)])]
);
</code></pre>
        <p>
            通过上面的代码可以看出，属性中的动态指令以及事件注册，都没有被解析，而是被完整的传入到 createElement 方法中，为了开发便捷，我们会在方法内部对这些动态指令进行解析。
        </p>
        <p>createElement 方法参数：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数名称</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>tagName</td>
                    <td>标签名称</td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>attr</td>
                    <td>标签属性</td>
                    <td>object</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>标签子集</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <p>AST.Element 的属性（继承于 AST.Node）：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>tagName</td>
                    <td>标签名成</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>事件</td>
                    <td>AST.Event[]</td>
                </tr>
                <tr>
                    <td>attributes</td>
                    <td>标签属性</td>
                    <td>AST.Attribute[]</td>
                </tr>
            </tbody>
        </table>
        <p>AST.Event 作为标签的事件类型，它包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>事件名称</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>modifiers</td>
                    <td>事件修饰符</td>
                    <td>
                        Array&lt;string&gt;，可查看
                        <a href="/base/template-event" target="_blank">事件注册</a>
                        中对修饰符的介绍。
                    </td>
                </tr>
                <tr>
                    <td>functionName</td>
                    <td>事件执行函数名称</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>functionParam</td>
                    <td>事件执行函数参数</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <p>AST.Attribute 作为标签属性类型，它包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>name</td>
                    <td>属性名称</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>value</td>
                    <td>属性值</td>
                    <td>string/undefined</td>
                </tr>
                <tr>
                    <td>express</td>
                    <td>若存在动态指令，则转换为表达式进行存放</td>
                    <td>string/undefined</td>
                </tr>
            </tbody>
        </table>
        <h3>AST.Command 指令</h3>
        <p>
            AST.Command 作为动态指令节点，负责处理非标签属性外的所有动态值的渲染，通过其属性
            <code>cmdName</code>
            它可以细分为：
            <code>IfCommand(条件指令)</code>
            、
            <code>ForCommand(循环指令)</code>
            、
            <code>SectionCommand(区块指令)</code>
            以及
            <code>PropertyOrFunctionCommand(通用动态值指令)</code>
            。
        </p>
        <p>首先介绍下这些细分指令的基础类型（AST.Command），它包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>指令名称</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>isGroup</td>
                    <td>
                        是否是组，例如：for、if 等它包括
                        <code>
                            {}
                        </code>
                        子集
                    </td>
                    <td>boolean</td>
                </tr>
            </tbody>
        </table>
        <p>
            这些细分指令都可以通过
            <code>createCommand</code>
            和
            <code>createCodeFunction</code>
            两个方法来进行创建，其中
            <code>createCommand</code>
            用于创建
            <code>if/for/section</code>
            等 group 组节点，而
            <code>createCodeFunction</code>
            用于创建
            <strong>动态属性或者方法</strong>
            。
        </p>
        <pre><code class="language-ts">createCommand(&quot;for&quot;, &quot;let item of list&quot;, [
    createElement(&quot;div&quot;, undefined, [
        //创建一个@item
        createCodeFunction(&quot;item&quot;)
    ])
]);
</code></pre>
        <p>createCommand 函数的参数包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数名称</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>
                        指令名称（if/
                        <strong>elseif（无空格）</strong>
                        /else/for/section）
                    </td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>param</td>
                    <td>指令参数</td>
                    <td>string</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <p>
            <code>createCodeFunction</code>
            函数只有一个参数，code（动态表达式），它作为叶子节点没有子集。
        </p>
        <p>
            我们通过使用
            <code>createCommand</code>
            创建节点时，我们会在内部根据指令名称去解析参数表达式，并将其转换为对应的 AST 节点类型，可通过判断 cmdName 来确定当前节点的指令类型：
        </p>
        <h4>IfCommand</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>指令名称</td>
                    <td>'if'</td>
                </tr>
                <tr>
                    <td>kind</td>
                    <td>if 条件类别</td>
                    <td>
                        <code>if</code>
                        /
                        <code>elseif</code>
                        /
                        <code>else</code>
                        ，注意
                        <strong>elseif</strong>
                        中间没有空格。
                    </td>
                </tr>
                <tr>
                    <td>condition</td>
                    <td>条件表达式</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
            </tbody>
        </table>
        <h4>ForCommand</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>指令名称</td>
                    <td>'for'</td>
                </tr>
                <tr>
                    <td>keyType</td>
                    <td>循环类别</td>
                    <td>
                        <code>in</code>
                        /
                        <code>of</code>
                        /
                        <code>condition</code>
                        ，分别对应
                        <code>for in</code>
                        、
                        <code>for of</code>
                        和
                        <code>条件循环</code>
                    </td>
                </tr>
                <tr>
                    <td>param</td>
                    <td>循环参数表达式</td>
                    <td>
                        <code>AST.ConditionParam</code>
                        /
                        <code>AST.InOrOfParam</code>
                    </td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
            </tbody>
        </table>
        <p>ConditionParam 作为条件循环参数类型，它包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>letKey</td>
                    <td>
                        项的 key 值，即 let
                        <strong>item</strong>
                    </td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>defaultKeyVal</td>
                    <td>项的起始默认值</td>
                    <td>any</td>
                </tr>
                <tr>
                    <td>condition</td>
                    <td>条件表达式</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>step</td>
                    <td>步骤表达式</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <p>
            InOrOfParam 作为
            <code>for in</code>
            和
            <code>for of</code>
            的参数类型，它包括：
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>indexKey</td>
                    <td>索引 key</td>
                    <td>string/undefind</td>
                </tr>
                <tr>
                    <td>itemKey</td>
                    <td>项 key 值</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>dataKey</td>
                    <td>需要遍历目标表达式</td>
                    <td>string</td>
                </tr>
            </tbody>
        </table>
        <h4>SectionCommand</h4>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>cmdName</td>
                    <td>指令名称</td>
                    <td>'section'</td>
                </tr>
                <tr>
                    <td>id</td>
                    <td>区块 id</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>paramKeys</td>
                    <td>区块参数表达式</td>
                    <td>string</td>
                </tr>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
            </tbody>
        </table>
        <h3>AST.Component 动态组件</h3>
        <p>
            该类型不会出现在
            <code>template</code>
            模板的解析结果内，它作为一种动态组件的节点一般适用于动态
            <code>Render</code>
            渲染中。在
            <strong>SFC</strong>
            静态编译时，应避免采用该方法，而应使用
            <code>AST.Element</code>
            类型，在运行时进行分流。。
        </p>
        <pre><code class="language-ts">import MyComponent from &quot;./children.joker&quot;;

createComponent(
    MyComponent,
    {
        message: &quot;@model.message&quot;,
        &quot;@click&quot;: &quot;handleClick&quot;
    },
    [
        //子集
        createText(&quot;我是文本&quot;)
    ]
);
</code></pre>
        <p>该方法会输入三个参数：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数名称</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>component</td>
                    <td>组件</td>
                    <td>IComponent / (new (...arg: any[]) =&gt; IComponent)</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>attrs</td>
                    <td>标签属性</td>
                    <td>object</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>标签子集</td>
                    <td>AST.Node[]</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <p>
            通过上面的介绍可以看出，它的作用只适用于已经明确确定的组件渲染，所以它只可以在 js 中去常见，而非在
            <code>&lt;template&gt;</code>
            中创建该类型节点。
        </p>
        <p>AST.Component 属性包括：</p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>属性名</th>
                    <th>说明</th>
                    <th>类型</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>childrens</td>
                    <td>子集</td>
                    <td>AST.Node[]</td>
                </tr>
                <tr>
                    <td>attributes</td>
                    <td>组件属性</td>
                    <td>AST.Attribute[]（可参看 AST.Element 对其的介绍）</td>
                </tr>
                <tr>
                    <td>events</td>
                    <td>组件事件</td>
                    <td>AST.Event[] （可参看 AST.Element 对其的介绍）</td>
                </tr>
                <tr>
                    <td>component</td>
                    <td>组件</td>
                    <td>IComponent /(new (...arg: any[]) =&gt; IComponent) 【已初始化的组件/待初始化的组件】</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
<template>
    <div ref="container" class="joker-demo-container">
        <h2>事件总线</h2>
        <p>
            组件间的通讯，除了
            <code>传参</code>
            、
            <code>事件</code>
            之外，我们还提供全局
            <code>事件总线</code>
            来处理事件之间的广播通讯需求。
        </p>
        <h3>概述</h3>
        <p>
            <code>Event Bus</code>
            是一种事件总线架构模式，它通过中央事件调度中心来解耦组件间的事件通信。与组件内部直接处理事件相比，
            <code>Event Bus</code>
            允许事件在不同的组件之间传递，无需组件间直接交互，从而
            <strong>降低</strong>
            了它们之间的
            <strong>耦合度</strong>
            。
            通常，
            <code>Event Bus</code>
            用于处理全局性的事件，如用户登录成功、窗口尺寸调整等。这些事件往往与
            <strong>特定的动作</strong>
            或
            <strong>操作</strong>
            相关联，例如用户点击按钮或浏览器窗口的尺寸变化。
            <code>Event Bus</code>
            可以在组件内部或任何脚本中被使用，但它需要在适当的时机进行全局事件的注册与卸载，以确保资源得到有效管理和内存的合理释放。
        </p>
        <h3>如何使用</h3>
        <p>事件总线的定义</p>
        <pre><code class="language-ts">import { EventBus } from &quot;@joker.front/core&quot;;

export let userEvent = new EventBus&lt;{
    login: { userName: string; id: string };
    registory: { userId: string };
}&gt;();
</code></pre>
        <p>事件的广播</p>
        <pre><code class="language-ts">import { userEvent } from &quot;./event-bus/user-event&quot;;

userEvent.trigger(&quot;login&quot;, {
    userName: &quot;张三&quot;,
    id: &quot;123&quot;
});
</code></pre>
        <p>事件的监听</p>
        <pre><code class="language-ts">import { userEvent } from &quot;./event-bus/user-event&quot;;

let destroyEvent = userEvent.on(&quot;login&quot;, (e, userInfo) =&gt; {
    let userName = userInfo.userName;
    //TODO:...
});
</code></pre>
        <p>
            事件处理函数会接收到两个参数，第一个参数为事件处理对象，第二个为事件参数，其中事件处理对象会提供两个属性供大家使用：
        </p>
        <ul>
            <li>
                <strong>stopPropagation</strong>
                : Function 阻止事件继续广播
            </li>
            <li>
                <strong>callTimes</strong>
                : Number 该事件在本次处理过程中已经被响应了多少次
            </li>
        </ul>
        <blockquote>
            <p>
                在使用
                <code>on</code>
                或者
                <code>once</code>
                来进行事件注册时，注册后会立即返回一个
                <code>destroy销毁</code>
                函数，可通过调用该函数来立即销毁本次注册的事件，当然你可以可以使用
                <code>off</code>
                的方式来进行删除。
                注册事件后，会立即返回一个销毁方法，可调用该销毁方法来注销该事件的注册。
                注册事件时，可使用
                <code>*</code>
                通配符，来接收所有事件的处理，可以在事件处理函数的第一个参数
                <code>e</code>
                中获取当前事件名称。
            </p>
        </blockquote>
        <pre><code class="language-ts">import { userEvent } from &quot;./event-bus/user-event&quot;;

//卸载所有login事件
userEvent.off(&quot;login&quot;);

//卸载user下所有事件
userEvent.off();
</code></pre>
        <blockquote>
            <p>我们可以在事件总线初始化时，指定泛型类型，来约束事件参数的类型。</p>
        </blockquote>
        <h3>API</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>方法名称</th>
                    <th>说明</th>
                    <th>参数</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>on</td>
                    <td>事件注册</td>
                    <td>事件名称，事件处理函数</td>
                </tr>
                <tr>
                    <td>off</td>
                    <td>事件卸载</td>
                    <td>事件名称，事件处理函数（可选）</td>
                </tr>
                <tr>
                    <td>trigger</td>
                    <td>触发事件</td>
                    <td>事件名称，事件参数（可选）</td>
                </tr>
                <tr>
                    <td>once</td>
                    <td>事件注册（只响应一次）</td>
                    <td>事件名称，事件处理函数</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>
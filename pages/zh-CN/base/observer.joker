<template>
    <div ref="container" class="joker-demo-container">
        <h2>数据代理</h2>
        <p>本章主要介绍如何将数据进行代理。</p>
        <h3>声明响应式状态</h3>
        <p>
            我们可以在任何脚本文件中使用 Core 提供的
            <code>observer</code>
            、
            <code>ShallowObserver</code>
            方法来对一个对象进行代理劫持。
        </p>
        <p>
            我们可以在
            <a href="/base/component" target="_blank">组件</a>
            的
            <code>model</code>
            属性中指定需要被代理的属性。这些属性会在组件加载之前通过
            <code>observer</code>
            函数进行数据代理，以便在属性值发生变化时能够执行相应的操作。
        </p>
        <pre><code class="language-ts">import { observer } from &quot;@joker.front/core&quot;;

let obj = observer({ userName: &quot;张三&quot; });

let arr = observer([1, 2, 3, 4]);
</code></pre>
        <blockquote>
            <p>
                通常情况下，该函数一般会配合 watcher
                <a href="/base/watcher" target="_blank">数据订阅</a>
                一起使用。若确定该对象不会被订阅，不建议做数据代理操作，以免造成不必要的性能开销。
            </p>
        </blockquote>
        <h3>observer 数据代理劫持</h3>
        <p>
            <code>observer</code>
            是一个广泛应用的通用数据代理函数，它能够对对象的所有深层属性进行实时的数据代理操作。此外，该函数还能在对象新增属性时，自动对新属性值执行代理劫持，确保数据变化能够被即时监测和处理。
        </p>
        <p>该方法提供两个参数配置：</p>
        <ul>
            <li>
                需要被代理的
                <strong>对象</strong>
                ，该参数必须是对象类型。
            </li>
            <li>
                是否 clone（可选），默认为 false，我们可以设置为 true，来 clone 新的对象进行代理，而不污染原始数据。
            </li>
        </ul>
        <p>这里的需要代理的对象，在类型上有以下要求：</p>
        <ul>
            <li>一个纯粹的对象 或 数组</li>
            <li>可扩展 Object.isExtensible</li>
            <li>非冻结 Object.isFrozen</li>
        </ul>
        <p>
            当我们想对一个复杂的对象做数据代理劫持，并且还想排出某些不需要代理的数据时，可以使用冻结方法，冻结的属性可避免数据代理操纵。
        </p>
        <p>或者你也可以为某一个对象添加一个需要被代理的属性：</p>
        <pre><code class="language-ts">defineObserverProperty(obj, &quot;keyName&quot;, {
    userName: &quot;张三&quot;
});
</code></pre>
        <p>
            <code>defineObserverProperty</code>
            该方法可以实现向对象中配置一个属性，并将该属性的值做代理操作。
        </p>
        <h3>ShallowObserver 数据浅代理劫持</h3>
        <p>
            <code>ShallowObserver</code>
            是一种数据代理机制，与
            <code>observer</code>
            相比，它能够对任意数据类型进行代理劫持。然而，它的区别在于
            <code>ShallowObserver</code>
            不会对对象或数组的深层嵌套属性进行代理，而只针对直接传入的值执行数据代理。
        </p>
        <pre><code class="language-ts">import { ShallowObserver } from &quot;@joker.front/core&quot;;

let obj = new ShallowObserver({ userName: &quot;张三&quot; });
//obj.value  =&gt; 张三

let arr = new ShallowObserver([1, 2, 3, 4]);
//obj.value  =&gt; [1, 2, 3, 4]

let age = new ShallowObserver(12);
//obj.value  =&gt; 12

let message = new ShallowObserver(&quot;我是提示&quot;);
//obj.value  =&gt; 我是提示
</code></pre>
        <p>
            通过
            <code>ShallowObserver</code>
            我们会得到一个代理对象，我们可以通过获取该对象的
            <code>value</code>
            属性来获取当前代理的值，获取值会被
            <strong>订阅</strong>
            ，并在值更新时进行订阅通知。
        </p>
        <p>
            除此之外我们也可以通过其提供的
            <code>isChanged</code>
            属性来判断当前值有没有变更过：
        </p>
        <pre><code class="language-ts">let message = new ShallowObserver(&quot;我是提示&quot;);
//obj.isChanged  =&gt; false

//更新值
message.value = &quot;我是新的提示&quot;;
//obj.isChanged  =&gt; true
</code></pre>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
    components = {
        BottomNav
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>